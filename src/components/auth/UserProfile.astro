<div>
    <!-- Loading Skeleton -->
    <div id="loadingSkeleton" class="card bg-base-100 shadow-xl">
        <div class="card-body p-6">
            <!-- Avatar and Name Section -->
            <div class="flex flex-col items-center mb-6">
                <div class="skeleton w-24 h-24 rounded-full mb-4"></div>
                <div class="skeleton h-8 w-48"></div>
                <div class="skeleton h-4 w-32 mt-2"></div>
            </div>

            <!-- Member Status -->
            <div class="flex justify-center mb-6">
                <div class="skeleton h-6 w-32"></div>
            </div>

            <!-- Stats Grid -->
            <div class="stats stats-vertical shadow bg-base-200 mb-6">
                <div class="stat px-6 py-2">
                    <div class="skeleton h-4 w-20 mb-1"></div>
                    <div class="skeleton h-8 w-24"></div>
                </div>
                <div class="stat px-6 py-2">
                    <div class="skeleton h-4 w-24 mb-1"></div>
                    <div class="skeleton h-8 w-32"></div>
                </div>
            </div>

            <!-- Member Details -->
            <div class="space-y-4">
                <div class="space-y-2">
                    <div class="skeleton h-4 w-24"></div>
                    <div class="skeleton h-10 w-full"></div>
                </div>
                <div class="space-y-2">
                    <div class="skeleton h-4 w-20"></div>
                    <div class="skeleton h-10 w-full"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Actual Content -->
    <div id="userInfo" class="card bg-base-100 shadow-xl opacity-0 hidden">
        <div class="card-body p-6">
            <!-- Avatar and Name Section -->
            <div class="flex flex-col items-center mb-6">
                <div class="avatar online placeholder mb-4">
                    <div
                        class="bg-gradient-to-br from-primary to-secondary text-primary-content rounded-full w-24 ring ring-primary ring-offset-base-100 ring-offset-2"
                    >
                        <span id="userInitials" class="text-3xl"></span>
                    </div>
                </div>
                <div class="text-center">
                    <h2 id="userName" class="text-2xl font-bold">
                        Not signed in
                    </h2>
                    <p id="userEmail" class="text-base-content/70">
                        Not signed in
                    </p>
                </div>
            </div>

            <!-- Member Status -->
            <div class="flex justify-center mb-6">
                <div id="memberStatus" class="badge badge-lg gap-2">
                    <span class="loading loading-ring loading-xs"></span>
                    Not verified
                </div>
            </div>

            <!-- Stats Grid -->
            <div class="stats stats-vertical shadow bg-base-200 mb-6">
                <div class="stat px-6 py-2">
                    <div class="stat-title text-xs">Last Login</div>
                    <div id="lastLogin" class="stat-value text-lg">Never</div>
                </div>
                <div class="stat px-6 py-2">
                    <div class="stat-title text-xs">Member Since</div>
                    <div class="stat-value text-lg" id="memberSince">-</div>
                </div>
            </div>

            <!-- View Toggles -->
            <div class="space-y-2 mb-6">
                <div id="officerViewToggle" class="hidden">
                    <label
                        class="flex cursor-pointer gap-2 justify-between items-center bg-gradient-to-r from-primary/10 to-primary/5 rounded-lg px-4 py-2 hover:from-primary/20 hover:to-primary/10 transition-all"
                    >
                        <span class="flex items-center gap-2">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-4 w-4"
                                viewBox="0 0 20 20"
                                fill="currentColor"
                            >
                                <path
                                    d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z"
                                ></path>
                            </svg>
                            <span>Officer View</span>
                        </span>
                        <input type="checkbox" class="toggle toggle-primary" />
                    </label>
                </div>
                <div id="sponsorViewToggle" class="hidden">
                    <label
                        class="flex cursor-pointer gap-2 justify-between items-center bg-gradient-to-r from-warning/10 to-warning/5 rounded-lg px-4 py-2 hover:from-warning/20 hover:to-warning/10 transition-all"
                    >
                        <span class="flex items-center gap-2">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-4 w-4"
                                viewBox="0 0 20 20"
                                fill="currentColor"
                            >
                                <path
                                    fill-rule="evenodd"
                                    d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                    clip-rule="evenodd"></path>
                            </svg>
                            <span>Sponsor View</span>
                        </span>
                        <input type="checkbox" class="toggle toggle-warning" />
                    </label>
                </div>
            </div>

            <!-- Auth Buttons -->
            <div class="pt-4">
                <button
                    id="contentLoginButton"
                    class="login-button btn btn-primary w-full gap-2 hidden"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-5 w-5"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                    >
                        <path
                            fill-rule="evenodd"
                            d="M3 3a1 1 0 011 1v12a1 1 0 11-2 0V4a1 1 0 011-1zm7.707 3.293a1 1 0 010 1.414L9.414 9H17a1 1 0 110 2H9.414l1.293 1.293a1 1 0 01-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0z"
                            clip-rule="evenodd"></path>
                    </svg>
                    Sign in with IEEEUCSD SSO
                </button>
                <button
                    id="contentLogoutButton"
                    class="logout-button btn btn-error w-full gap-2 hidden"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-5 w-5"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                    >
                        <path
                            fill-rule="evenodd"
                            d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z"
                            clip-rule="evenodd"></path>
                    </svg>
                    Sign Out
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Profile Editor Dialog -->
<dialog id="profileEditor" class="modal">
    <div class="modal-box">
        <h3 class="font-bold text-2xl mb-6">Edit Profile</h3>
        <form class="space-y-4" onsubmit="return false" novalidate>
            <div class="form-control">
                <label class="label">
                    <span class="label-text">Name</span>
                </label>
                <input
                    type="text"
                    id="editorName"
                    class="input input-bordered"
                />
            </div>
            <div class="form-control">
                <label class="label">
                    <span class="label-text">Email</span>
                </label>
                <input
                    type="email"
                    id="editorEmail"
                    class="input input-bordered"
                    disabled
                />
            </div>
            <div class="form-control">
                <label class="label">
                    <span class="label-text">IEEE Member ID</span>
                </label>
                <input
                    type="text"
                    id="editorMemberId"
                    class="input input-bordered"
                />
            </div>
            <div class="form-control">
                <label class="label">
                    <span class="label-text">Loyalty Points</span>
                </label>
                <input
                    type="number"
                    id="editorPoints"
                    min="0"
                    class="input input-bordered"
                />
            </div>
            <div class="form-control">
                <label class="label">
                    <span class="label-text">Resume</span>
                </label>
                <div class="flex flex-col gap-2">
                    <p id="editorCurrentResume" class="text-sm opacity-70">
                        No resume uploaded
                    </p>
                    <input
                        type="file"
                        id="editorResume"
                        accept=".pdf,.doc,.docx"
                        class="file-input file-input-bordered file-input-sm w-full"
                    />
                </div>
            </div>
            <div class="modal-action">
                <button
                    type="button"
                    id="saveProfileButton"
                    class="btn btn-primary">Save Changes</button
                >
                <button
                    type="button"
                    class="btn"
                    onclick="profileEditor.close()">Cancel</button
                >
            </div>
        </form>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>

<!-- PDF Viewer Modal -->
<dialog id="pdfViewer" class="modal">
    <div class="modal-box w-11/12 max-w-5xl h-[80vh]">
        <div class="flex justify-between items-center mb-4">
            <h3 class="font-bold text-lg" id="pdfTitle">Resume</h3>
            <div class="flex items-center gap-2">
                <a
                    id="pdfExternalLink"
                    href="#"
                    target="_blank"
                    class="btn btn-sm btn-ghost"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-4 w-4 mr-1"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                    >
                        <path
                            d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"
                        ></path>
                        <path
                            d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z"
                        ></path>
                    </svg>
                    Open in New Tab
                </a>
                <form method="dialog">
                    <button class="btn btn-sm btn-circle btn-ghost">✕</button>
                </form>
            </div>
        </div>
        <div class="h-[calc(100%-4rem)]">
            <iframe
                id="pdfFrame"
                class="w-full h-full rounded-lg border-2 border-base-300"
                src=""></iframe>
        </div>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>

<style>
    .hidden {
        display: none;
    }
    #userInfo {
        transition: all 0.3s ease-in-out;
    }
    .modal {
        background: rgba(0, 0, 0, 0.5);
    }
    .modal::backdrop {
        background: rgba(0, 0, 0, 0.5);
    }
</style>

<script>
    import { StoreAuth } from "./StoreAuth";
    import { EventCheckIn } from "./EventCheckIn";

    // Initialize auth and event check-in
    document.addEventListener("DOMContentLoaded", () => {
        try {
            const auth = new StoreAuth();
            new EventCheckIn();

            // Add officer view toggle handler
            const officerViewToggle =
                document.getElementById("officerViewToggle");
            const officerViewCheckbox = officerViewToggle?.querySelector(
                'input[type="checkbox"]'
            ) as HTMLInputElement;

            if (officerViewCheckbox) {
                officerViewCheckbox.addEventListener("change", () => {
                    const defaultView = document.getElementById("defaultView");
                    const officerView = document.getElementById("officerView");
                    const mainTabs = document.querySelector(".tabs.tabs-boxed");
                    const officerContent =
                        document.getElementById("officerContent");
                    const settingsView =
                        document.getElementById("settingsView");

                    if (
                        defaultView &&
                        officerView &&
                        mainTabs &&
                        officerContent &&
                        settingsView
                    ) {
                        if (officerViewCheckbox.checked) {
                            // Hide default view, settings, and tabs
                            defaultView.classList.add("hidden");
                            settingsView.classList.add("hidden");
                            mainTabs.classList.add("hidden");
                            // Show officer view
                            officerView.classList.remove("hidden");
                            officerContent.classList.remove("hidden");
                        } else {
                            // Show default view and tabs
                            defaultView.classList.remove("hidden");
                            mainTabs.classList.remove("hidden");
                            // Hide officer view
                            officerView.classList.add("hidden");
                            officerContent.classList.add("hidden");
                        }
                    }
                });
            }

            // Add login button event listener
            const loginButtons = document.querySelectorAll(".login-button");
            loginButtons.forEach((button) => {
                button.addEventListener("click", () => {
                    const loadingSkeleton =
                        document.getElementById("loadingSkeleton");
                    const userInfo = document.getElementById("userInfo");

                    // Show loading state
                    if (loadingSkeleton)
                        loadingSkeleton.style.display = "block";
                    if (userInfo) userInfo.classList.add("hidden");

                    // Call the handleLogin method
                    auth.handleLogin().catch((error) => {
                        console.error("Login error:", error);
                        // Show error message
                        if (loadingSkeleton)
                            loadingSkeleton.style.display = "none";
                        if (userInfo) {
                            const errorMessage = document.createElement("div");
                            errorMessage.className = "alert alert-error";
                            errorMessage.innerHTML = `
                                <div class="flex items-center gap-2">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                                    </svg>
                                    <span>Failed to sign in. Please try again.</span>
                                </div>
                            `;
                            userInfo.innerHTML = "";
                            userInfo.appendChild(errorMessage);
                            userInfo.classList.remove("hidden");
                            userInfo.style.opacity = "1";
                        }
                    });
                });
            });

            // Add error handling for failed initialization
            window.addEventListener("unhandledrejection", (event) => {
                console.error("Profile loading error:", event.reason);
                const userInfo = document.getElementById("userInfo");
                const loadingSkeleton =
                    document.getElementById("loadingSkeleton");
                const memberDetails = document.getElementById("memberDetails");
                const errorMessage = document.createElement("div");

                errorMessage.className = "alert alert-error";
                errorMessage.innerHTML = `
                    <div class="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                        <span>Failed to load profile. Please refresh the page.</span>
                    </div>
                `;

                if (loadingSkeleton) loadingSkeleton.style.display = "none";
                if (userInfo) {
                    if (memberDetails) memberDetails.style.display = "none";
                    userInfo.appendChild(errorMessage);
                    userInfo.classList.remove("hidden");
                    userInfo.style.opacity = "1";
                }
            });

            // Check auth state and update UI accordingly
            const authState = auth.getAuthState();
            if (!authState.isValid || !authState.model) {
                const userInfo = document.getElementById("userInfo");
                const loadingSkeleton =
                    document.getElementById("loadingSkeleton");
                const memberDetails = document.getElementById("memberDetails");
                const contentLoginButton =
                    document.getElementById("contentLoginButton");

                if (loadingSkeleton) loadingSkeleton.style.display = "none";
                if (memberDetails) memberDetails.style.display = "none";
                if (contentLoginButton)
                    contentLoginButton.classList.remove("hidden");
                if (userInfo) {
                    userInfo.classList.remove("hidden");
                    userInfo.style.opacity = "1";
                }
            }
        } catch (error) {
            console.error("Failed to initialize profile:", error);
        }
    });

    // Add user initials generation
    const userNameElement = document.getElementById("userName");
    const userInitialsElement = document.getElementById("userInitials");
    const memberSinceElement = document.getElementById("memberSince");

    if (userNameElement && userInitialsElement && memberSinceElement) {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (
                    mutation.type === "characterData" ||
                    mutation.type === "childList"
                ) {
                    const name = userNameElement.textContent || "";
                    if (name && name !== "Not signed in") {
                        const initials = name
                            .split(" ")
                            .map((n) => n[0])
                            .join("")
                            .toUpperCase()
                            .slice(0, 2);
                        userInitialsElement.textContent = initials;
                    } else {
                        userInitialsElement.textContent = "?";
                    }
                }
            });
        });

        observer.observe(userNameElement, {
            characterData: true,
            childList: true,
            subtree: true,
        });
    }

    // Set member since date
    if (memberSinceElement) {
        const created = new Date(); // Replace with actual user creation date
        memberSinceElement.textContent = created.toLocaleDateString();
    }
</script>
