<div
    class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 lg:gap-0 mb-4"
>
    <h2 class="text-2xl font-bold">Member Management</h2>
    <div class="flex flex-col lg:flex-row gap-2">
        <div class="form-control w-full">
            <input
                type="text"
                id="resumeSearch"
                placeholder="Search users..."
                class="input input-bordered input-sm w-full"
            />
        </div>
        <div class="flex gap-2 w-full lg:w-auto">
            <button id="searchResumes" class="btn btn-sm flex-1 lg:flex-none">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
                <span class="lg:hidden ml-2">Search</span>
            </button>
            <button
                id="refreshResumes"
                class="btn btn-ghost btn-sm flex-1 lg:flex-none"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                >
                    <path
                        fill-rule="evenodd"
                        d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z"
                        clip-rule="evenodd"></path>
                </svg>
                <span class="lg:hidden ml-2">Refresh</span>
            </button>
        </div>
    </div>
</div>
<div class="overflow-x-auto">
    <table
        class="table table-zebra w-full [&_tr]:border-b [&_tr]:border-base-200 text-center"
    >
        <thead class="hidden lg:table-header-group">
            <tr>
                <th class="text-center">Name</th>
                <th class="text-center">Email</th>
                <th class="text-center">Member ID</th>
                <th class="text-center">Points</th>
                <th class="text-center">Resume</th>
                <th class="text-center">Actions</th>
            </tr>
        </thead>
        <tbody id="resumeList" class="divide-y divide-base-200">
            <!-- Resume entries will be populated here -->
        </tbody>
    </table>
</div>

<script>
    import PocketBase from "pocketbase";
    import yaml from "js-yaml";
    import configYaml from "../../data/storeConfig.yaml?raw";

    // Parse YAML configuration
    interface Config {
        api: {
            baseUrl: string;
        };
    }
    const config = yaml.load(configYaml) as Config;
    const pb = new PocketBase(config.api.baseUrl);

    // Get DOM elements
    const resumeList = document.getElementById("resumeList");
    const searchInput = document.getElementById(
        "resumeSearch"
    ) as HTMLInputElement;
    const searchButton = document.getElementById("searchResumes");
    const refreshButton = document.getElementById("refreshResumes");

    // Function to format date
    function formatDate(dateStr: string): string {
        return new Date(dateStr).toLocaleString();
    }

    // Function to render user row
    function renderUserRow(user: any) {
        return `
            <tr class="hover:bg-base-200">
                <td class="text-center">
                    <div class="font-medium">${user.name || "N/A"}</div>
                </td>
                <td class="text-center">${user.email || "N/A"}</td>
                <td class="text-center">${user.member_id || "N/A"}</td>
                <td class="text-center">${user.points || "0"}</td>
                <td class="text-center">
                    ${
                        user.resume
                            ? `
                        <button class="btn btn-ghost btn-xs" onclick="window.open('${pb.files.getUrl(user, user.resume)}', '_blank')">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd" />
                            </svg>
                            View
                        </button>
                    `
                            : "No Resume"
                    }
                </td>
                <td class="text-center">
                    <button class="btn btn-ghost btn-xs" onclick="document.getElementById('profileEditor').showModal(); document.dispatchEvent(new CustomEvent('editUser', { detail: ${JSON.stringify(user)} }))">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                        </svg>
                        Edit
                    </button>
                </td>
            </tr>
        `;
    }

    // Function to load users
    async function loadUsers(searchQuery = "") {
        if (!resumeList) return;

        try {
            // Show loading state
            resumeList.innerHTML = `
                <tr>
                    <td colspan="6" class="text-center py-4">
                        <span class="loading loading-spinner loading-md"></span>
                        Loading users...
                    </td>
                </tr>
            `;

            // Fetch users with filter if search query exists
            const filter = searchQuery
                ? `name ~ "${searchQuery}" || email ~ "${searchQuery}" || member_id ~ "${searchQuery}"`
                : "";

            const users = await pb.collection("users").getList(1, 50, {
                filter,
                sort: "-created",
            });

            // Update table
            if (users.items.length === 0) {
                resumeList.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-4">
                            No users found
                        </td>
                    </tr>
                `;
                return;
            }

            resumeList.innerHTML = users.items.map(renderUserRow).join("");
        } catch (error) {
            console.error("Failed to load users:", error);
            resumeList.innerHTML = `
                <tr>
                    <td colspan="6" class="text-center py-4 text-error">
                        Failed to load users. Please try again.
                    </td>
                </tr>
            `;
        }
    }

    // Add event listeners
    if (searchButton && searchInput) {
        searchButton.addEventListener("click", () => {
            loadUsers(searchInput.value);
        });

        searchInput.addEventListener("keypress", (e) => {
            if (e.key === "Enter") {
                loadUsers(searchInput.value);
            }
        });
    }

    if (refreshButton) {
        refreshButton.addEventListener("click", () => {
            if (searchInput) searchInput.value = "";
            loadUsers();

            // Turn off officer view toggle
            const officerViewToggle =
                document.getElementById("officerViewToggle");
            const officerViewCheckbox = officerViewToggle?.querySelector(
                'input[type="checkbox"]'
            ) as HTMLInputElement;
            if (officerViewCheckbox) {
                officerViewCheckbox.checked = false;
                // Trigger the change event to update the views
                officerViewCheckbox.dispatchEvent(new Event("change"));
            }
        });
    }

    // Initial load
    loadUsers();
</script>
