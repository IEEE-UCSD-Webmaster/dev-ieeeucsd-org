<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 h-full">
    <!-- Left Column - Events List -->
    <div class="card bg-base-200 shadow-xl h-full">
        <div class="card-body p-6 flex flex-col h-full">
            <!-- Fixed Header Section -->
            <div class="flex-none">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="card-title text-2xl">Events</h2>
                </div>

                <!-- Event Check-in -->
                <div
                    id="eventCheckInSkeleton"
                    class="card bg-base-100 shadow-sm mb-4 animate-pulse"
                >
                    <div class="card-body p-4">
                        <div class="h-6 bg-base-300 rounded w-2/3 mb-4"></div>
                        <div class="flex items-center gap-2">
                            <div class="h-8 bg-base-300 rounded flex-1"></div>
                            <div class="h-8 bg-base-300 rounded w-24"></div>
                        </div>
                    </div>
                </div>

                <div
                    id="eventCheckInContent"
                    class="card bg-base-100 shadow-sm mb-4 hidden"
                >
                    <div class="card-body p-4">
                        <h3 class="font-medium text-lg mb-2">
                            Enter your event code to check in
                        </h3>
                        <div id="eventCheckInSection" class="space-y-2">
                            <div class="flex items-center gap-2">
                                <input
                                    type="text"
                                    id="eventCodeInput"
                                    placeholder="Enter event code"
                                    class="input input-bordered input-sm flex-1"
                                    value=""
                                />
                                <button
                                    id="checkInButton"
                                    class="btn btn-sm btn-primary"
                                    >Check In</button
                                >
                            </div>
                            <p
                                id="checkInStatus"
                                class="text-xs mt-1 opacity-70"
                            >
                            </p>
                        </div>
                    </div>
                </div>

                <div class="divider mt-0 mb-4"></div>
            </div>

            <!-- Scrollable Events List -->
            <div class="flex-1 overflow-y-auto min-h-0">
                <div id="eventsList" class="space-y-4">
                    <!-- Loading Skeletons -->
                    {
                        Array(3)
                            .fill(0)
                            .map(() => (
                                <div class="card bg-base-100 shadow-sm animate-pulse">
                                    <div class="card-body p-4">
                                        <div class="flex justify-between items-start">
                                            <div class="space-y-3 w-full">
                                                <div class="h-6 bg-base-300 rounded w-3/4" />
                                                <div class="space-y-2">
                                                    <div class="h-4 bg-base-300 rounded w-1/2 opacity-70" />
                                                    <div class="h-4 bg-base-300 rounded w-2/3 opacity-70" />
                                                    <div class="h-4 bg-base-300 rounded w-1/3 opacity-70" />
                                                </div>
                                            </div>
                                            <div class="h-6 w-20 bg-base-300 rounded" />
                                        </div>
                                    </div>
                                </div>
                            ))
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Right Column - Profile Information -->
    <div class="card bg-base-200 shadow-xl h-full">
        <div class="card-body p-6">
            <h2 class="card-title text-2xl mb-6">Past Events</h2>
            <div id="pastEventsList" class="space-y-4 overflow-y-auto">
                <!-- Loading Skeletons -->
                {
                    Array(3)
                        .fill(0)
                        .map(() => (
                            <div class="card bg-base-100 shadow-sm animate-pulse">
                                <div class="card-body p-4">
                                    <div class="flex justify-between items-start">
                                        <div class="space-y-3 w-full">
                                            <div class="h-6 bg-base-300 rounded w-3/4" />
                                            <div class="space-y-2">
                                                <div class="h-4 bg-base-300 rounded w-1/2 opacity-70" />
                                                <div class="h-4 bg-base-300 rounded w-2/3 opacity-70" />
                                                <div class="h-4 bg-base-300 rounded w-1/3 opacity-70" />
                                            </div>
                                        </div>
                                        <div class="h-6 w-20 bg-base-300 rounded" />
                                    </div>
                                </div>
                            </div>
                        ))
                }
            </div>
        </div>
    </div>
</div>

<!-- PDF Viewer Modal -->
<dialog id="pdfViewer" class="modal">
    <div class="modal-box w-11/12 max-w-5xl h-[80vh]">
        <div class="flex justify-between items-center mb-4">
            <h3 class="font-bold text-lg" id="pdfTitle">Resume</h3>
            <div class="flex items-center gap-2">
                <a
                    id="pdfExternalLink"
                    href="#"
                    target="_blank"
                    class="btn btn-sm btn-ghost"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-4 w-4 mr-1"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                    >
                        <path
                            d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"
                        ></path>
                        <path
                            d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5z"
                        ></path>
                    </svg>
                    Open in New Tab
                </a>
                <form method="dialog">
                    <button class="btn btn-sm btn-circle btn-ghost">✕</button>
                </form>
            </div>
        </div>
        <div class="h-[calc(100%-4rem)]">
            <iframe
                id="pdfFrame"
                class="w-full h-full rounded-lg border-2 border-base-300"
                src=""></iframe>
        </div>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>

<!-- File Viewer Modal -->
<dialog id="fileViewer" class="modal">
    <div class="modal-box w-11/12 max-w-5xl">
        <div class="flex justify-between items-center mb-4">
            <h3 class="font-bold text-lg" id="fileViewerTitle">Event Files</h3>
            <form method="dialog">
                <button class="btn btn-sm btn-circle btn-ghost">✕</button>
            </form>
        </div>
        <div
            id="fileViewerContent"
            class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
        >
            <!-- Files will be dynamically inserted here -->
        </div>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>

<script>
    import { StoreAuth } from "../auth/StoreAuth";
    import { EventCheckIn } from "../auth/EventCheckIn";
    import PocketBase from "pocketbase";
    import yaml from "js-yaml";
    import configYaml from "../../data/storeConfig.yaml?raw";
    import type { RecordModel } from "pocketbase";

    // Parse YAML configuration with type assertion
    interface Config {
        api: {
            baseUrl: string;
        };
    }
    const config = yaml.load(configYaml) as Config;
    const pb = new PocketBase(config.api.baseUrl);

    // Initialize auth and check-in
    new StoreAuth();
    new EventCheckIn();

    // Handle loading states
    const eventCheckInSkeleton = document.getElementById(
        "eventCheckInSkeleton"
    );
    const eventCheckInContent = document.getElementById("eventCheckInContent");

    // Function to show content and hide skeleton
    function showEventCheckIn() {
        if (eventCheckInSkeleton && eventCheckInContent) {
            eventCheckInSkeleton.classList.add("hidden");
            eventCheckInContent.classList.remove("hidden");
        }
    }

    // Show content when auth state changes
    pb.authStore.onChange(() => {
        showEventCheckIn();
        renderEvents();
    });

    // Show content on initial load if already authenticated
    if (pb.authStore.isValid) {
        showEventCheckIn();
    }

    // Function to format date
    function formatDate(dateStr: string): string {
        const date = new Date(dateStr);
        return date.toLocaleString();
    }

    // Function to check if event is upcoming
    function isUpcoming(startDate: string): boolean {
        const now = new Date();
        const start = new Date(startDate);
        return start > now;
    }

    // Function to check if event is current
    function isCurrent(startDate: string, endDate: string): boolean {
        const now = new Date();
        const start = new Date(startDate);
        const end = new Date(endDate);
        return start <= now && now <= end;
    }

    // Function to get event status
    function getEventStatus(
        event: any,
        isAttended: boolean
    ): { status: string; badge: string } {
        if (isAttended) {
            return {
                status: "Attended",
                badge: "badge-success",
            };
        }

        if (isCurrent(event.start_date, event.end_date)) {
            return {
                status: "Current",
                badge: "badge-warning",
            };
        }

        if (isUpcoming(event.start_date)) {
            return {
                status: "Upcoming",
                badge: "badge-info",
            };
        }

        return {
            status: "Past",
            badge: "badge-ghost",
        };
    }

    // Function to get status icon
    function getStatusIcon(status: string): string {
        const checkIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
        </svg>`;

        const clockIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" />
        </svg>`;

        const exclamationIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
        </svg>`;

        switch (status) {
            case "Attended":
                return checkIcon;
            case "Current":
                return exclamationIcon;
            case "Upcoming":
                return clockIcon;
            default:
                return "";
        }
    }

    interface Event extends RecordModel {
        event_id: string;
        event_name: string;
        start_date: string;
        end_date: string;
        location: string;
    }

    // Function to render event card
    function renderEventCard(event: Event, attendedEvents: string[]): string {
        const isAttended =
            Array.isArray(attendedEvents) &&
            attendedEvents.includes(event.event_id);
        const hasFiles =
            event.files && Array.isArray(event.files) && event.files.length > 0;
        const isPastEvent = new Date(event.end_date) < new Date();

        // Only show files button for past events
        const filesButton =
            hasFiles && isPastEvent
                ? `
            <button 
                class="btn btn-ghost btn-xs gap-2" 
                onclick="document.getElementById('fileViewer').showModal(); document.dispatchEvent(new CustomEvent('viewEventFiles', { detail: { eventId: '${event.id}' } }))"
            >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd" />
                </svg>
                ${event.files.length} File${event.files.length > 1 ? "s" : ""}
            </button>
        `
                : "";

        return `
            <div class="card bg-base-100 shadow-sm">
                <div class="card-body p-4">
                    <div class="flex justify-between items-start">
                        <div>
                            <h3 class="font-medium text-lg">${event.event_name}</h3>
                            <div class="text-sm opacity-70 space-y-1">
                                <p>Starts: ${formatDate(event.start_date)}</p>
                                <p>Ends: ${formatDate(event.end_date)}</p>
                                ${event.location ? `<p class="text-xs">📍 ${event.location}</p>` : ""}
                            </div>
                            ${hasFiles && isPastEvent ? `<div class="mt-2">${filesButton}</div>` : ""}
                        </div>
                        ${
                            isAttended
                                ? `
                            <div class="badge badge-success gap-1">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                                </svg>
                                Attended
                            </div>
                        `
                                : ""
                        }
                    </div>
                </div>
            </div>
        `;
    }

    // Function to render events
    async function renderEvents() {
        const eventsList = document.getElementById("eventsList");
        const pastEventsList = document.getElementById("pastEventsList");
        if (!eventsList || !pastEventsList) return;

        try {
            // Get current user's attended events with safe parsing
            const user = pb.authStore.model;
            let attendedEvents: string[] = [];

            if (user?.events_attended) {
                try {
                    attendedEvents =
                        typeof user.events_attended === "string"
                            ? JSON.parse(user.events_attended)
                            : Array.isArray(user.events_attended)
                              ? user.events_attended
                              : [];
                } catch (e) {
                    console.warn("Failed to parse events_attended:", e);
                    attendedEvents = [];
                }
            }

            // Fetch all events
            const events = await pb.collection("events").getList(1, 50, {
                sort: "start_date", // Sort by start date ascending for upcoming events
            });

            // Clear loading skeletons
            eventsList.innerHTML = "";
            pastEventsList.innerHTML = "";

            // Categorize events
            const now = new Date();
            const currentEvents: Event[] = [];
            const upcomingEvents: Event[] = [];
            const pastEvents: Event[] = [];

            events.items.forEach((event) => {
                const typedEvent = event as Event;
                const startDate = new Date(typedEvent.start_date);
                const endDate = new Date(typedEvent.end_date);

                if (startDate > now) {
                    upcomingEvents.push(typedEvent);
                } else if (endDate >= now && startDate <= now) {
                    currentEvents.push(typedEvent);
                } else {
                    pastEvents.push(typedEvent);
                }
            });

            // Sort upcoming events by start date and limit to 2
            const nextTwoEvents = upcomingEvents
                .sort(
                    (a, b) =>
                        new Date(a.start_date).getTime() -
                        new Date(b.start_date).getTime()
                )
                .slice(0, 2);

            // Sort past events by date descending (most recent first)
            const sortedPastEvents = pastEvents.sort(
                (a, b) =>
                    new Date(b.end_date).getTime() -
                    new Date(a.end_date).getTime()
            );

            // Function to render section
            function renderSection(
                title: string,
                events: Event[],
                showDivider: boolean = true
            ): string {
                if (events.length === 0) return "";
                return `
                    <div class="space-y-4">
                        <h3 class="text-lg font-medium text-base-content/70">${title}</h3>
                        <div class="space-y-4">
                            ${events.map((event) => renderEventCard(event, attendedEvents)).join("")}
                        </div>
                        ${showDivider ? '<div class="divider"></div>' : ""}
                    </div>
                `;
            }

            // Update main events list (left column)
            eventsList.innerHTML = `
                ${renderSection("Upcoming Events", nextTwoEvents, nextTwoEvents.length > 0)}
                ${renderSection("Currently Happening", currentEvents, false)}
            `;

            // Update past events list (right column)
            pastEventsList.innerHTML =
                sortedPastEvents.length > 0
                    ? sortedPastEvents
                          .map((event) =>
                              renderEventCard(event, attendedEvents)
                          )
                          .join("")
                    : `<div class="text-center py-8 opacity-70">
                    <p>No past events found</p>
                   </div>`;

            // If no events at all
            if (events.items.length === 0) {
                eventsList.innerHTML = `
                    <div class="text-center py-8 opacity-70">
                        <p>No events found</p>
                    </div>
                `;
            }
        } catch (err) {
            console.error("Failed to render events:", err);
            const errorMessage = `
                <div class="text-center py-8 text-error">
                    <p>Failed to load events. Please try again later.</p>
                </div>
            `;
            eventsList.innerHTML = errorMessage;
            pastEventsList.innerHTML = errorMessage;
        }
    }

    // Add event listener for viewing files
    interface ViewEventFilesEvent extends CustomEvent {
        detail: {
            eventId: string;
        };
    }

    document.addEventListener("viewEventFiles", ((e: Event) => {
        if (e instanceof CustomEvent && "eventId" in e.detail) {
            (async () => {
                try {
                    const event = await pb
                        .collection("events")
                        .getOne(e.detail.eventId);
                    const fileViewerContent =
                        document.getElementById("fileViewerContent");
                    const fileViewerTitle =
                        document.getElementById("fileViewerTitle");

                    if (fileViewerContent && fileViewerTitle) {
                        fileViewerTitle.textContent = `Files - ${event.event_name}`;

                        if (
                            !event.files ||
                            !Array.isArray(event.files) ||
                            event.files.length === 0
                        ) {
                            fileViewerContent.innerHTML = `
                                <div class="col-span-full text-center py-4 opacity-70">
                                    No files available
                                </div>
                            `;
                            return;
                        }

                        fileViewerContent.innerHTML = event.files
                            .map((file) => {
                                const fileUrl = pb.files.getURL(event, file);
                                const fileName =
                                    file.split("/").pop() || "File";
                                const fileExt =
                                    fileName.split(".").pop()?.toLowerCase() ||
                                    "";

                                let preview = "";
                                if (
                                    ["jpg", "jpeg", "png", "gif"].includes(
                                        fileExt
                                    )
                                ) {
                                    preview = `
                                    <div class="aspect-video bg-base-300 rounded-t-lg overflow-hidden">
                                        <img src="${fileUrl}" alt="${fileName}" class="w-full h-full object-contain">
                                    </div>
                                `;
                                } else {
                                    preview = `
                                    <div class="aspect-video bg-base-300 rounded-t-lg flex items-center justify-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 opacity-50" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd" />
                                        </svg>
                                    </div>
                                `;
                                }

                                return `
                                <div class="card bg-base-200">
                                    ${preview}
                                    <div class="card-body p-4">
                                        <h3 class="card-title text-sm flex items-center justify-between gap-2" title="${fileName}">
                                            <span class="truncate min-w-0">${fileName.substring(0, fileName.lastIndexOf("."))}</span>
                                            <span class="text-base-content/50 text-xs uppercase font-mono shrink-0">${fileExt}</span>
                                        </h3>
                                    </div>
                                    <div class="border-t border-base-300">
                                        <a href="${fileUrl}" target="_blank" class="btn btn-ghost btn-sm w-full rounded-none rounded-b-lg gap-2 h-12">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                                <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z" />
                                                <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z" />
                                            </svg>
                                            Open in New Tab
                                        </a>
                                    </div>
                                </div>
                            `;
                            })
                            .join("");
                    }
                } catch (err) {
                    console.error("Failed to load event files:", err);
                    const fileViewerContent =
                        document.getElementById("fileViewerContent");
                    if (fileViewerContent) {
                        fileViewerContent.innerHTML = `
                            <div class="col-span-full text-center py-4 text-error">
                                Failed to load files. Please try again.
                            </div>
                        `;
                    }
                }
            })();
        }
    }) as unknown as EventListener);

    // Initial render
    renderEvents();
</script>
