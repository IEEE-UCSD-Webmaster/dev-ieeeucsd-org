---
// Admin Dashboard Component
import { Authentication } from "../../scripts/pocketbase/Authentication";
import { Get } from "../../scripts/pocketbase/Get";
import {
    Collections,
    type User,
    type Event,
    type Officer,
    type Reimbursement,
} from "../../schemas/pocketbase";
import { Icon } from "astro-icon/components";
import AdminSystemActivity from "./AdminDashboard/AdminSystemActivity";

const auth = Authentication.getInstance();
const get = Get.getInstance();

// Fetch initial data for the dashboard
let users: User[] = [];
let officers: Officer[] = [];
let events: Event[] = [];
let reimbursements: Reimbursement[] = [];
let userCount = 0;
let officerCount = 0;
let eventCount = 0;
let reimbursementCount = 0;
let pendingReimbursements = 0;
let upcomingEvents = 0;

// Interface for expanded reimbursement data
interface ExpandedReimbursement extends Reimbursement {
    expand?: {
        submitted_by?: User;
    };
}

try {
    if (auth.isAuthenticated()) {
        // Get users with pagination
        const userResponse = await get.getList<User>(
            Collections.USERS,
            1,
            50,
            "",
            "-created"
        );
        users = userResponse.items;
        userCount = userResponse.totalItems;

        // Get officers with user expansion
        const officerResponse = await get.getList<Officer>(
            Collections.OFFICERS,
            1,
            50,
            "",
            "-created",
            { expand: "user" }
        );
        officers = officerResponse.items;
        officerCount = officerResponse.totalItems;

        // Get events
        const eventResponse = await get.getList<Event>(
            Collections.EVENTS,
            1,
            50,
            "",
            "-start_date"
        );
        events = eventResponse.items;
        eventCount = eventResponse.totalItems;

        // Get upcoming events
        const now = new Date().toISOString();
        const upcomingEventsResponse = await get.getList<Event>(
            Collections.EVENTS,
            1,
            1,
            `start_date > "${now}" && published = true`,
            "start_date"
        );
        upcomingEvents = upcomingEventsResponse.totalItems;

        // Get reimbursements with user expansion
        const reimbursementResponse = await get.getList<ExpandedReimbursement>(
            Collections.REIMBURSEMENTS,
            1,
            50,
            "",
            "-created",
            { expand: "submitted_by" }
        );
        reimbursements = reimbursementResponse.items;
        reimbursementCount = reimbursementResponse.totalItems;

        // Get pending reimbursements
        const pendingReimbursementsResponse = await get.getList(
            Collections.REIMBURSEMENTS,
            1,
            1,
            `status = "submitted" || status = "under_review"`,
            "-created"
        );
        pendingReimbursements = pendingReimbursementsResponse.totalItems;
    }
} catch (error) {
    console.error("Error fetching admin dashboard data:", error);
}

// Format date for display
const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
        year: "numeric",
        month: "short",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
    });
};

// Get user name from reimbursement
const getUserName = (reimbursement: ExpandedReimbursement) => {
    if (reimbursement.expand?.submitted_by?.name) {
        return reimbursement.expand.submitted_by.name;
    }

    // Try to find user by ID if expansion failed
    const user = users.find((u) => u.id === reimbursement.submitted_by);
    return user?.name || "Unknown User";
};
---

<div class="card bg-base-100 shadow-xl">
    <div class="card-body">
        <h2 class="card-title text-2xl mb-4 flex items-center gap-2">
            <Icon name="heroicons:shield-check" class="h-6 w-6 text-primary" />
            Administrator Dashboard
            <div class="badge badge-primary badge-sm">Real-time</div>
            <button
                id="refreshDashboardBtn"
                class="btn btn-sm btn-ghost ml-auto"
            >
                <Icon name="heroicons:arrow-path" class="h-5 w-5" />
                Refresh
            </button>
        </h2>

        <!-- Stats Overview -->
        <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6">
            <!-- User Stats -->
            <div
                class="card bg-base-200 hover:shadow-md transition-all duration-300 hover:-translate-y-1"
            >
                <div class="card-body p-4">
                    <div class="flex justify-between items-start">
                        <h3 class="card-title text-lg">Users</h3>
                        <div class="p-2 bg-primary/10 rounded-full">
                            <Icon
                                name="heroicons:users"
                                class="h-5 w-5 text-primary"
                            />
                        </div>
                    </div>
                    <p class="text-primary text-3xl font-semibold">
                        {userCount}
                    </p>
                    <div class="flex justify-between items-center">
                        <p class="text-sm opacity-70">Total registered</p>
                        <div class="badge badge-primary badge-sm">Active</div>
                    </div>
                </div>
            </div>

            <!-- Officer Stats -->
            <div
                class="card bg-base-200 hover:shadow-md transition-all duration-300 hover:-translate-y-1"
            >
                <div class="card-body p-4">
                    <div class="flex justify-between items-start">
                        <h3 class="card-title text-lg">Officers</h3>
                        <div class="p-2 bg-secondary/10 rounded-full">
                            <Icon
                                name="heroicons:user-group"
                                class="h-5 w-5 text-secondary"
                            />
                        </div>
                    </div>
                    <p class="text-secondary text-3xl font-semibold">
                        {officerCount}
                    </p>
                    <div class="flex justify-between items-center">
                        <p class="text-sm opacity-70">Active officers</p>
                        <button
                            class="text-xs text-secondary hover:underline"
                            id="viewOfficersBtn">View all</button
                        >
                    </div>
                </div>
            </div>

            <!-- Event Stats -->
            <div
                class="card bg-base-200 hover:shadow-md transition-all duration-300 hover:-translate-y-1"
            >
                <div class="card-body p-4">
                    <div class="flex justify-between items-start">
                        <h3 class="card-title text-lg">Events</h3>
                        <div class="p-2 bg-accent/10 rounded-full">
                            <Icon
                                name="heroicons:calendar"
                                class="h-5 w-5 text-accent"
                            />
                        </div>
                    </div>
                    <p class="text-accent text-3xl font-semibold">
                        {eventCount}
                    </p>
                    <div class="flex justify-between items-center">
                        <p class="text-sm opacity-70">Total events</p>
                        <button
                            class="text-xs text-accent hover:underline"
                            id="viewEventsBtn">View all</button
                        >
                    </div>
                </div>
            </div>

            <!-- Upcoming Events -->
            <div
                class="card bg-base-200 hover:shadow-md transition-all duration-300 hover:-translate-y-1"
            >
                <div class="card-body p-4">
                    <div class="flex justify-between items-start">
                        <h3 class="card-title text-lg">Upcoming</h3>
                        <div class="p-2 bg-success/10 rounded-full">
                            <Icon
                                name="heroicons:calendar-days"
                                class="h-5 w-5 text-success"
                            />
                        </div>
                    </div>
                    <p class="text-success text-3xl font-semibold">
                        {upcomingEvents}
                    </p>
                    <div class="flex justify-between items-center">
                        <p class="text-sm opacity-70">Future events</p>
                        <div class="badge badge-success badge-sm">Active</div>
                    </div>
                </div>
            </div>

            <!-- Reimbursement Stats -->
            <div
                class="card bg-base-200 hover:shadow-md transition-all duration-300 hover:-translate-y-1"
            >
                <div class="card-body p-4">
                    <div class="flex justify-between items-start">
                        <h3 class="card-title text-lg">Reimbursements</h3>
                        <div class="p-2 bg-info/10 rounded-full">
                            <Icon
                                name="heroicons:banknotes"
                                class="h-5 w-5 text-info"
                            />
                        </div>
                    </div>
                    <p class="text-info text-3xl font-semibold">
                        {reimbursementCount}
                    </p>
                    <div class="flex justify-between items-center">
                        <p class="text-sm opacity-70">Total requests</p>
                        <button
                            class="text-xs text-info hover:underline"
                            id="viewReimbursementsBtn">View all</button
                        >
                    </div>
                </div>
            </div>

            <!-- Pending Reimbursements -->
            <div
                class="card bg-base-200 hover:shadow-md transition-all duration-300 hover:-translate-y-1"
            >
                <div class="card-body p-4">
                    <div class="flex justify-between items-start">
                        <h3 class="card-title text-lg">Pending</h3>
                        <div class="p-2 bg-warning/10 rounded-full">
                            <Icon
                                name="heroicons:clock"
                                class="h-5 w-5 text-warning"
                            />
                        </div>
                    </div>
                    <p class="text-warning text-3xl font-semibold">
                        {pendingReimbursements}
                    </p>
                    <div class="flex justify-between items-center">
                        <p class="text-sm opacity-70">Awaiting review</p>
                        {
                            pendingReimbursements > 0 && (
                                <div class="badge badge-warning badge-sm">
                                    Action needed
                                </div>
                            )
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="mt-6">
            <h3 class="text-xl font-semibold mb-4 flex items-center gap-2">
                <Icon name="heroicons:bolt" class="h-5 w-5 text-warning" />
                Administrative Actions
            </h3>
            <div class="tabs tabs-boxed">
                <button class="tab tab-active" data-tab="user">
                    <Icon name="heroicons:users" class="h-5 w-5 mr-2" />
                    Manage Users
                </button>
                <button class="tab" data-tab="event">
                    <Icon name="heroicons:calendar" class="h-5 w-5 mr-2" />
                    Manage Events
                </button>
                <button class="tab" data-tab="finance">
                    <Icon name="heroicons:banknotes" class="h-5 w-5 mr-2" />
                    Manage Finances
                </button>
                <button class="tab" data-tab="log">
                    <Icon name="heroicons:document-text" class="h-5 w-5 mr-2" />
                    System Logs
                </button>
            </div>
        </div>

        <!-- Management Sections -->
        <div id="adminSections" class="mt-6">
            <!-- User Management Section -->
            <div id="userSection" class="tab-content active">
                <div class="card bg-base-200 p-4">
                    <h3
                        class="text-xl font-semibold mb-4 flex items-center gap-2"
                    >
                        <Icon
                            name="heroicons:users"
                            class="h-5 w-5 text-primary"
                        />
                        User Management
                    </h3>
                    <div class="overflow-x-auto">
                        <table class="table table-zebra w-full">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Role</th>
                                    <th>Last Login</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="loading-skeleton hidden">
                                    <td
                                        ><div
                                            class="h-4 bg-base-300 rounded w-24 animate-pulse"
                                        >
                                        </div></td
                                    >
                                    <td
                                        ><div
                                            class="h-4 bg-base-300 rounded w-32 animate-pulse"
                                        >
                                        </div></td
                                    >
                                    <td
                                        ><div
                                            class="h-4 bg-base-300 rounded w-16 animate-pulse"
                                        >
                                        </div></td
                                    >
                                    <td
                                        ><div
                                            class="h-4 bg-base-300 rounded w-28 animate-pulse"
                                        >
                                        </div></td
                                    >
                                    <td>
                                        <div class="flex gap-2">
                                            <div
                                                class="h-6 bg-base-300 rounded w-12 animate-pulse"
                                            >
                                            </div>
                                            <div
                                                class="h-6 bg-base-300 rounded w-12 animate-pulse"
                                            >
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                {
                                    users.map((user) => (
                                        <tr>
                                            <td>{user.name}</td>
                                            <td>{user.email}</td>
                                            <td>
                                                {user.member_id || "Member"}
                                            </td>
                                            <td>
                                                {user.last_login
                                                    ? formatDate(
                                                          user.last_login
                                                      )
                                                    : "Never"}
                                            </td>
                                            <td>
                                                <div class="flex gap-2">
                                                    <button
                                                        class="btn btn-xs btn-primary"
                                                        data-user-id={user.id}
                                                    >
                                                        Edit
                                                    </button>
                                                    <button
                                                        class="btn btn-xs btn-error"
                                                        data-user-id={user.id}
                                                    >
                                                        Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    ))
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Event Management Section -->
            <div id="eventSection" class="tab-content hidden">
                <div class="card bg-base-200 p-4">
                    <h3
                        class="text-xl font-semibold mb-4 flex items-center gap-2"
                    >
                        <Icon
                            name="heroicons:calendar"
                            class="h-5 w-5 text-secondary"
                        />
                        Event Management
                    </h3>
                    <div class="overflow-x-auto">
                        <table class="table table-zebra w-full">
                            <thead>
                                <tr>
                                    <th>Event Name</th>
                                    <th>Date</th>
                                    <th>Location</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="loading-skeleton hidden">
                                    <td
                                        ><div
                                            class="h-4 bg-base-300 rounded w-32 animate-pulse"
                                        >
                                        </div></td
                                    >
                                    <td
                                        ><div
                                            class="h-4 bg-base-300 rounded w-28 animate-pulse"
                                        >
                                        </div></td
                                    >
                                    <td
                                        ><div
                                            class="h-4 bg-base-300 rounded w-24 animate-pulse"
                                        >
                                        </div></td
                                    >
                                    <td
                                        ><div
                                            class="h-4 bg-base-300 rounded w-16 animate-pulse"
                                        >
                                        </div></td
                                    >
                                    <td>
                                        <div class="flex gap-2">
                                            <div
                                                class="h-6 bg-base-300 rounded w-12 animate-pulse"
                                            >
                                            </div>
                                            <div
                                                class="h-6 bg-base-300 rounded w-12 animate-pulse"
                                            >
                                            </div>
                                            <div
                                                class="h-6 bg-base-300 rounded w-16 animate-pulse"
                                            >
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                {
                                    events.map((event) => (
                                        <tr>
                                            <td>{event.event_name}</td>
                                            <td>
                                                {formatDate(event.start_date)}
                                            </td>
                                            <td>{event.location}</td>
                                            <td>
                                                <div
                                                    class={`badge ${event.published ? "badge-success" : "badge-warning"}`}
                                                >
                                                    {event.published
                                                        ? "Published"
                                                        : "Draft"}
                                                </div>
                                            </td>
                                            <td>
                                                <div class="flex gap-2">
                                                    <button
                                                        class="btn btn-xs btn-primary"
                                                        data-event-id={event.id}
                                                    >
                                                        Edit
                                                    </button>
                                                    <button
                                                        class="btn btn-xs btn-error"
                                                        data-event-id={event.id}
                                                    >
                                                        Delete
                                                    </button>
                                                    <button
                                                        class={`btn btn-xs ${event.published ? "btn-warning" : "btn-success"}`}
                                                        data-event-id={event.id}
                                                        data-action="toggle-publish"
                                                        data-current-state={
                                                            event.published
                                                                ? "published"
                                                                : "draft"
                                                        }
                                                    >
                                                        {event.published
                                                            ? "Unpublish"
                                                            : "Publish"}
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    ))
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Finance Management Section -->
            <div id="financeSection" class="tab-content hidden">
                <div class="card bg-base-200 p-4">
                    <h3
                        class="text-xl font-semibold mb-4 flex items-center gap-2"
                    >
                        <Icon
                            name="heroicons:banknotes"
                            class="h-5 w-5 text-accent"
                        />
                        Finance Management
                    </h3>
                    <div class="overflow-x-auto">
                        <table class="table table-zebra w-full">
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th>Amount</th>
                                    <th>Submitted By</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="loading-skeleton hidden">
                                    <td
                                        ><div
                                            class="h-4 bg-base-300 rounded w-32 animate-pulse"
                                        >
                                        </div></td
                                    >
                                    <td
                                        ><div
                                            class="h-4 bg-base-300 rounded w-20 animate-pulse"
                                        >
                                        </div></td
                                    >
                                    <td
                                        ><div
                                            class="h-4 bg-base-300 rounded w-28 animate-pulse"
                                        >
                                        </div></td
                                    >
                                    <td
                                        ><div
                                            class="h-4 bg-base-300 rounded w-16 animate-pulse"
                                        >
                                        </div></td
                                    >
                                    <td>
                                        <div class="flex gap-2">
                                            <div
                                                class="h-6 bg-base-300 rounded w-16 animate-pulse"
                                            >
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                {
                                    reimbursements.map((reimbursement) => (
                                        <tr>
                                            <td>{reimbursement.title}</td>
                                            <td>
                                                $
                                                {reimbursement.total_amount.toFixed(
                                                    2
                                                )}
                                            </td>
                                            <td>
                                                {getUserName(
                                                    reimbursement as ExpandedReimbursement
                                                )}
                                            </td>
                                            <td>
                                                <div
                                                    class={`badge ${
                                                        reimbursement.status ===
                                                        "approved"
                                                            ? "badge-success"
                                                            : reimbursement.status ===
                                                                "rejected"
                                                              ? "badge-error"
                                                              : reimbursement.status ===
                                                                  "paid"
                                                                ? "badge-info"
                                                                : "badge-warning"
                                                    }`}
                                                >
                                                    {reimbursement.status}
                                                </div>
                                            </td>
                                            <td>
                                                <div class="flex gap-2">
                                                    <button
                                                        class="btn btn-xs btn-primary"
                                                        data-reimbursement-id={
                                                            reimbursement.id
                                                        }
                                                    >
                                                        Review
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    ))
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- System Logs Section -->
            <div id="logSection" class="tab-content hidden">
                <div class="card bg-base-200 p-4">
                    <h3
                        class="text-xl font-semibold mb-4 flex items-center gap-2"
                    >
                        <Icon
                            name="heroicons:document-text"
                            class="h-5 w-5 text-info"
                        />
                        System Logs
                    </h3>
                    <div id="adminSystemActivityLogs">
                        <AdminSystemActivity client:load limit={20} />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Client-side functionality for the admin dashboard
    document.addEventListener("DOMContentLoaded", async () => {
        // Fix for tab display issue - run this first
        const fixTabs = () => {
            console.log("Fixing tabs on page load");

            // Make sure all tab content sections exist in the DOM
            const tabSections = [
                "userSection",
                "eventSection",
                "financeSection",
                "logSection",
            ];
            let allSectionsExist = true;

            tabSections.forEach((id) => {
                const section = document.getElementById(id);
                if (!section) {
                    console.error(`Tab section ${id} not found in DOM`);
                    allSectionsExist = false;
                }
            });

            if (!allSectionsExist) {
                console.error("Not all tab sections exist, cannot fix tabs");
                return;
            }

            // Set initial tab state - show user section, hide others
            document.getElementById("userSection")?.classList.remove("hidden");
            document.getElementById("eventSection")?.classList.add("hidden");
            document.getElementById("financeSection")?.classList.add("hidden");
            document.getElementById("logSection")?.classList.add("hidden");

            // Set active tab
            document.querySelectorAll(".tab").forEach((tab) => {
                if (tab.getAttribute("data-tab") === "user") {
                    tab.classList.add("tab-active");
                } else {
                    tab.classList.remove("tab-active");
                }
            });

            console.log("Tab display fixed");
        };

        // Run the fix immediately
        fixTabs();

        // Debug: Check if tab content sections exist
        console.log("Checking tab content sections:");
        ["userSection", "eventSection", "financeSection", "logSection"].forEach(
            (id) => {
                const section = document.getElementById(id);
                console.log(`${id}: ${section ? "Found" : "Not found"}`);

                if (section) {
                    // Check if the section is visible
                    const isHidden = section.classList.contains("hidden");
                    const parentElement = section.parentElement;
                    console.log(
                        `${id} is ${isHidden ? "hidden" : "visible"}, parent: ${parentElement ? parentElement.id || "unnamed" : "none"}`
                    );
                }
            }
        );

        // Debug: Check if tab buttons exist
        const tabButtons = document.querySelectorAll(".tab");
        console.log(`Found ${tabButtons.length} tab buttons:`);
        tabButtons.forEach((button) => {
            const tabId = button.getAttribute("data-tab");
            console.log(`Tab button with data-tab="${tabId}": Found`);
        });

        // Check authentication status
        try {
            const { Authentication } = await import(
                "../../scripts/pocketbase/Authentication"
            );
            const auth = Authentication.getInstance();

            if (!auth.isAuthenticated()) {
                // Show authentication error
                const adminDashboard = document.querySelector(".card-body");
                if (adminDashboard) {
                    const authError = document.createElement("div");
                    authError.className = "alert alert-error shadow-lg mb-4";
                    authError.innerHTML = `
                        <div>
                            <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <div>
                                <h3 class="font-bold">Authentication Error</h3>
                                <div class="text-xs">You are not authenticated. Please log in to access the admin dashboard.</div>
                                <button class="btn btn-sm btn-primary mt-2" onclick="window.location.href='/login'">Log In</button>
                            </div>
                        </div>
                    `;
                    adminDashboard.prepend(authError);
                }

                console.error(
                    "Authentication error: User is not authenticated"
                );
                return;
            }

            // Debug: Log authentication status
            console.log("Authentication status: Authenticated");
            console.log("Current user:", auth.getCurrentUser());
        } catch (error) {
            console.error("Error checking authentication:", error);
        }

        const tabs = document.querySelectorAll(".tab");
        const tabContents = document.querySelectorAll(".tab-content");

        // Function to switch tabs
        const switchTab = (tabId: string) => {
            console.log(`Switching to tab: ${tabId}`);

            // Get the target section
            const targetSection = document.getElementById(`${tabId}Section`);
            if (!targetSection) {
                console.error(`Target section ${tabId}Section not found`);
                return;
            }

            // Hide all sections first
            [
                "userSection",
                "eventSection",
                "financeSection",
                "logSection",
            ].forEach((id) => {
                const section = document.getElementById(id);
                if (section) {
                    section.classList.add("hidden");
                }
            });

            // Show the target section
            targetSection.classList.remove("hidden");

            // Update active tab
            document.querySelectorAll(".tab").forEach((tab) => {
                if (tab.getAttribute("data-tab") === tabId) {
                    tab.classList.add("tab-active");
                } else {
                    tab.classList.remove("tab-active");
                }
            });

            // Special handling for log tab
            if (tabId === "log") {
                console.log("Refreshing AdminSystemActivity component");
                if (
                    typeof window !== "undefined" &&
                    (window as any).refreshAdminSystemActivity
                ) {
                    setTimeout(() => {
                        (window as any).refreshAdminSystemActivity();
                    }, 100);
                }
            }
        };

        // Add click handlers to tabs
        tabs.forEach((tab) => {
            tab.addEventListener("click", () => {
                const tabId = tab.getAttribute("data-tab");
                if (tabId) switchTab(tabId);
            });
        });

        // Add a specific handler for the log tab
        const logTab = document.querySelector('[data-tab="log"]');
        if (logTab) {
            logTab.addEventListener("click", function () {
                console.log("Log tab clicked directly");

                // Manual tab switching for log tab
                document.querySelectorAll(".tab").forEach(function (t) {
                    t.classList.remove("tab-active");
                });
                logTab.classList.add("tab-active");

                document.querySelectorAll(".tab-content").forEach(function (c) {
                    c.classList.add("hidden");
                });

                const logSection = document.getElementById("logSection");
                if (logSection) {
                    logSection.classList.remove("hidden");
                }
            });
        }

        // Handle "View all" button clicks
        document
            .getElementById("viewOfficersBtn")
            ?.addEventListener("click", () => switchTab("user"));
        document
            .getElementById("viewEventsBtn")
            ?.addEventListener("click", () => switchTab("event"));
        document
            .getElementById("viewReimbursementsBtn")
            ?.addEventListener("click", () => switchTab("finance"));

        // Handle user actions (edit, delete, review)
        const setupActionHandlers = () => {
            // User edit buttons
            document.querySelectorAll("[data-user-id]").forEach((button) => {
                button.addEventListener("click", async (e) => {
                    const target = e.currentTarget as HTMLElement;
                    const userId = target.getAttribute("data-user-id");
                    const isDelete = target.classList.contains("btn-error");

                    if (!userId) return;

                    if (isDelete) {
                        if (
                            confirm(
                                "Are you sure you want to delete this user? This action cannot be undone."
                            )
                        ) {
                            try {
                                const { Authentication } = await import(
                                    "../../scripts/pocketbase/Authentication"
                                );
                                const auth = Authentication.getInstance();
                                const pb = auth.getPocketBase();

                                // Delete the user
                                await pb.collection("users").delete(userId);

                                // Log the action
                                await logAdminAction(
                                    "delete",
                                    "users",
                                    `Deleted user with ID: ${userId}`
                                );

                                // Remove the row from the table
                                const row = target.closest("tr");
                                if (row) row.remove();

                                // Show success toast
                                showToast(
                                    "User deleted successfully",
                                    "success"
                                );

                                // Refresh stats
                                refreshData();
                            } catch (error) {
                                console.error("Error deleting user:", error);
                                showToast("Failed to delete user", "error");
                            }
                        }
                    } else {
                        // Show edit modal instead of redirecting
                        try {
                            const { Authentication } = await import(
                                "../../scripts/pocketbase/Authentication"
                            );
                            const { Get } = await import(
                                "../../scripts/pocketbase/Get"
                            );
                            const { Collections } = await import(
                                "../../schemas/pocketbase"
                            );

                            const auth = Authentication.getInstance();
                            const get = Get.getInstance();

                            // Show loading state
                            showToast("Loading user details...", "info");

                            // Get user details
                            const user = await get.getOne(
                                Collections.USERS,
                                userId
                            );
                            openUserEditModal(user);
                        } catch (error) {
                            console.error("Error fetching user:", error);
                            showToast("Failed to load user details", "error");
                        }
                    }
                });
            });

            // Function to open user edit modal
            const openUserEditModal = (user: any) => {
                let modal = document.getElementById("user-edit-modal");
                if (!modal) {
                    modal = document.createElement("div");
                    modal.id = "user-edit-modal";
                    modal.className = "modal";
                    document.body.appendChild(modal);
                }

                modal.innerHTML = `
                    <div class="modal-box max-w-2xl">
                        <h3 class="font-bold text-lg">Edit User</h3>
                        <div class="py-4 grid grid-cols-2 gap-4">
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Name</span>
                                </label>
                                <input type="text" id="user-name" class="input input-bordered" value="${user.name || ""}" />
                            </div>
                            
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Email</span>
                                </label>
                                <input type="email" id="user-email" class="input input-bordered" value="${user.email || ""}" />
                            </div>

                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Email Visibility</span>
                                </label>
                                <input type="checkbox" id="user-email-visibility" class="toggle" ${user.emailVisibility ? "checked" : ""} />
                            </div>

                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">PID</span>
                                </label>
                                <input type="text" id="user-pid" class="input input-bordered" value="${user.pid || ""}" />
                            </div>

                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Member ID</span>
                                </label>
                                <input type="text" id="user-member-id" class="input input-bordered" value="${user.member_id || ""}" />
                            </div>

                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Graduation Year</span>
                                </label>
                                <input type="number" id="user-graduation-year" class="input input-bordered" value="${user.graduation_year || ""}" />
                            </div>

                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Major</span>
                                </label>
                                <input type="text" id="user-major" class="input input-bordered" value="${user.major || ""}" />
                            </div>

                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Zelle Information</span>
                                </label>
                                <input type="text" id="user-zelle" class="input input-bordered" value="${user.zelle_information || ""}" />
                            </div>

                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Points</span>
                                </label>
                                <input type="number" id="user-points" class="input input-bordered" value="${user.points || 0}" />
                            </div>

                            <div class="form-control col-span-2">
                                <label class="label">
                                    <span class="label-text">Notification Preferences</span>
                                </label>
                                <textarea id="user-notification-prefs" class="textarea textarea-bordered h-20">${user.notification_preferences || ""}</textarea>
                            </div>

                            <div class="form-control col-span-2">
                                <label class="label">
                                    <span class="label-text">Display Preferences</span>
                                </label>
                                <textarea id="user-display-prefs" class="textarea textarea-bordered h-20">${user.display_preferences || ""}</textarea>
                            </div>

                            <div class="form-control col-span-2">
                                <label class="label">
                                    <span class="label-text">Accessibility Settings</span>
                                </label>
                                <textarea id="user-accessibility" class="textarea textarea-bordered h-20">${user.accessibility_settings || ""}</textarea>
                            </div>
                        </div>
                        <div class="modal-action">
                            <button class="btn" onclick="document.getElementById('user-edit-modal').classList.remove('modal-open')">Cancel</button>
                            <button id="save-user" class="btn btn-primary" data-id="${user.id}">Save Changes</button>
                        </div>
                    </div>
                `;

                modal.classList.add("modal-open");

                // Add event listener to save button
                document
                    .getElementById("save-user")
                    ?.addEventListener("click", async () => {
                        const userId = document
                            .getElementById("save-user")
                            ?.getAttribute("data-id");
                        if (!userId) return;

                        try {
                            const { Authentication } = await import(
                                "../../scripts/pocketbase/Authentication"
                            );
                            const { Update } = await import(
                                "../../scripts/pocketbase/Update"
                            );
                            const { Collections } = await import(
                                "../../schemas/pocketbase"
                            );

                            const auth = Authentication.getInstance();
                            const update = Update.getInstance();

                            // Gather all field values
                            const updateData = {
                                name: (
                                    document.getElementById(
                                        "user-name"
                                    ) as HTMLInputElement
                                )?.value,
                                email: (
                                    document.getElementById(
                                        "user-email"
                                    ) as HTMLInputElement
                                )?.value,
                                emailVisibility: (
                                    document.getElementById(
                                        "user-email-visibility"
                                    ) as HTMLInputElement
                                )?.checked,
                                pid: (
                                    document.getElementById(
                                        "user-pid"
                                    ) as HTMLInputElement
                                )?.value,
                                member_id: (
                                    document.getElementById(
                                        "user-member-id"
                                    ) as HTMLInputElement
                                )?.value,
                                graduation_year:
                                    parseInt(
                                        (
                                            document.getElementById(
                                                "user-graduation-year"
                                            ) as HTMLInputElement
                                        )?.value
                                    ) || null,
                                major: (
                                    document.getElementById(
                                        "user-major"
                                    ) as HTMLInputElement
                                )?.value,
                                zelle_information: (
                                    document.getElementById(
                                        "user-zelle"
                                    ) as HTMLInputElement
                                )?.value,
                                points:
                                    parseInt(
                                        (
                                            document.getElementById(
                                                "user-points"
                                            ) as HTMLInputElement
                                        )?.value
                                    ) || 0,
                                notification_preferences: (
                                    document.getElementById(
                                        "user-notification-prefs"
                                    ) as HTMLTextAreaElement
                                )?.value,
                                display_preferences: (
                                    document.getElementById(
                                        "user-display-prefs"
                                    ) as HTMLTextAreaElement
                                )?.value,
                                accessibility_settings: (
                                    document.getElementById(
                                        "user-accessibility"
                                    ) as HTMLTextAreaElement
                                )?.value,
                            };

                            // Update user
                            await update.updateFields(
                                Collections.USERS,
                                userId,
                                updateData
                            );

                            // Log the action
                            await logAdminAction(
                                "update",
                                "users",
                                `Updated user ${userId}`
                            );

                            // Close modal
                            modal?.classList.remove("modal-open");

                            // Show success toast
                            showToast("User updated successfully", "success");

                            // Refresh data
                            refreshData();
                        } catch (error) {
                            console.error("Error updating user:", error);
                            showToast("Failed to update user", "error");
                        }
                    });
            };

            // Event edit/delete/publish buttons
            document.querySelectorAll("[data-event-id]").forEach((button) => {
                button.addEventListener("click", async (e) => {
                    const target = e.currentTarget as HTMLElement;
                    const eventId = target.getAttribute("data-event-id");
                    const isDelete = target.classList.contains("btn-error");
                    const isTogglePublish =
                        target.getAttribute("data-action") === "toggle-publish";

                    if (!eventId) return;

                    if (isTogglePublish) {
                        try {
                            const currentState =
                                target.getAttribute("data-current-state");
                            const newPublishedState =
                                currentState !== "published";

                            const { Authentication } = await import(
                                "../../scripts/pocketbase/Authentication"
                            );
                            const { Update } = await import(
                                "../../scripts/pocketbase/Update"
                            );
                            const { Collections } = await import(
                                "../../schemas/pocketbase"
                            );

                            const auth = Authentication.getInstance();
                            const update = Update.getInstance();

                            // Update the event's published state
                            await update.updateFields(
                                Collections.EVENTS,
                                eventId,
                                {
                                    published: newPublishedState,
                                }
                            );

                            // Log the action
                            await logAdminAction(
                                "update",
                                "events",
                                `${newPublishedState ? "Published" : "Unpublished"} event with ID: ${eventId}`
                            );

                            // Update the button and badge
                            const row = target.closest("tr");
                            if (row) {
                                // Update badge
                                const badge = row.querySelector(".badge");
                                if (badge) {
                                    badge.className = `badge ${newPublishedState ? "badge-success" : "badge-warning"}`;
                                    badge.textContent = newPublishedState
                                        ? "Published"
                                        : "Draft";
                                }

                                // Update button
                                target.className = `btn btn-xs ${newPublishedState ? "btn-warning" : "btn-success"}`;
                                target.textContent = newPublishedState
                                    ? "Unpublish"
                                    : "Publish";
                                target.setAttribute(
                                    "data-current-state",
                                    newPublishedState ? "published" : "draft"
                                );
                            }

                            // Show success toast
                            showToast(
                                `Event ${newPublishedState ? "published" : "unpublished"} successfully`,
                                "success"
                            );

                            // Refresh stats
                            refreshData();
                        } catch (error) {
                            console.error("Error updating event:", error);
                            showToast("Failed to update event", "error");
                        }
                        return;
                    }

                    if (isDelete) {
                        if (
                            confirm(
                                "Are you sure you want to delete this event? This action cannot be undone."
                            )
                        ) {
                            try {
                                const { Authentication } = await import(
                                    "../../scripts/pocketbase/Authentication"
                                );
                                const { Collections } = await import(
                                    "../../schemas/pocketbase"
                                );

                                const auth = Authentication.getInstance();
                                const pb = auth.getPocketBase();

                                // Delete the event
                                await pb
                                    .collection(Collections.EVENTS)
                                    .delete(eventId);

                                // Log the action
                                await logAdminAction(
                                    "delete",
                                    "events",
                                    `Deleted event with ID: ${eventId}`
                                );

                                // Remove the row from the table
                                const row = target.closest("tr");
                                if (row) row.remove();

                                // Show success toast
                                showToast(
                                    "Event deleted successfully",
                                    "success"
                                );

                                // Refresh stats
                                refreshData();
                            } catch (error) {
                                console.error("Error deleting event:", error);
                                showToast("Failed to delete event", "error");
                            }
                        }
                    } else if (!isTogglePublish) {
                        // Show edit modal instead of redirecting
                        try {
                            const { Authentication } = await import(
                                "../../scripts/pocketbase/Authentication"
                            );
                            const { Get } = await import(
                                "../../scripts/pocketbase/Get"
                            );
                            const { Collections } = await import(
                                "../../schemas/pocketbase"
                            );

                            const auth = Authentication.getInstance();
                            const get = Get.getInstance();

                            // Show loading state
                            showToast("Loading event details...", "info");

                            // Get event details
                            const event = await get.getOne(
                                Collections.EVENTS,
                                eventId
                            );
                            openEventEditModal(event);
                        } catch (error) {
                            console.error("Error fetching event:", error);
                            showToast("Failed to load event details", "error");
                        }
                    }
                });
            });

            // Function to open event edit modal
            const openEventEditModal = (event: any) => {
                let modal = document.getElementById("event-edit-modal");
                if (!modal) {
                    modal = document.createElement("div");
                    modal.id = "event-edit-modal";
                    modal.className = "modal";
                    document.body.appendChild(modal);
                }

                const startDate = new Date(event.start_date);
                const endDate = new Date(event.end_date);

                modal.innerHTML = `
                    <div class="modal-box max-w-2xl">
                        <h3 class="font-bold text-lg">Edit Event</h3>
                        <div class="py-4 grid grid-cols-2 gap-4">
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Event Name</span>
                                </label>
                                <input type="text" id="event-name" class="input input-bordered" value="${event.event_name || ""}" />
                            </div>
                            
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Event Code</span>
                                </label>
                                <input type="text" id="event-code" class="input input-bordered" value="${event.event_code || ""}" />
                            </div>

                            <div class="form-control col-span-2">
                                <label class="label">
                                    <span class="label-text">Description</span>
                                </label>
                                <textarea id="event-description" class="textarea textarea-bordered h-24">${event.event_description || ""}</textarea>
                            </div>
                            
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Location</span>
                                </label>
                                <input type="text" id="event-location" class="input input-bordered" value="${event.location || ""}" />
                            </div>

                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Points to Reward</span>
                                </label>
                                <input type="number" id="event-points" class="input input-bordered" value="${event.points_to_reward || 0}" />
                            </div>
                            
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Start Date</span>
                                </label>
                                <input type="datetime-local" id="event-start-date" class="input input-bordered" 
                                    value="${startDate.toISOString().slice(0, 16)}" />
                            </div>
                            
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">End Date</span>
                                </label>
                                <input type="datetime-local" id="event-end-date" class="input input-bordered" 
                                    value="${endDate.toISOString().slice(0, 16)}" />
                            </div>

                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Published</span>
                                </label>
                                <input type="checkbox" id="event-published" class="toggle" ${event.published ? "checked" : ""} />
                            </div>

                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Has Food</span>
                                </label>
                                <input type="checkbox" id="event-has-food" class="toggle" ${event.has_food ? "checked" : ""} />
                            </div>

                            <div class="form-control col-span-2">
                                <label class="label">
                                    <span class="label-text">Files</span>
                                    <span class="label-text-alt">Current files: ${event.files?.length || 0}</span>
                                </label>
                                <input type="file" id="event-files" class="file-input file-input-bordered w-full" multiple />
                            </div>
                        </div>
                        <div class="modal-action">
                            <button class="btn" onclick="document.getElementById('event-edit-modal').classList.remove('modal-open')">Cancel</button>
                            <button id="save-event" class="btn btn-primary" data-id="${event.id}">Save Changes</button>
                        </div>
                    </div>
                `;

                modal.classList.add("modal-open");

                // Add event listener to save button
                document
                    .getElementById("save-event")
                    ?.addEventListener("click", async () => {
                        const eventId = document
                            .getElementById("save-event")
                            ?.getAttribute("data-id");
                        if (!eventId) return;

                        try {
                            const { Authentication } = await import(
                                "../../scripts/pocketbase/Authentication"
                            );
                            const { Update } = await import(
                                "../../scripts/pocketbase/Update"
                            );
                            const { Collections } = await import(
                                "../../schemas/pocketbase"
                            );

                            const auth = Authentication.getInstance();
                            const update = Update.getInstance();

                            // Gather all field values
                            const updateData = {
                                event_name: (
                                    document.getElementById(
                                        "event-name"
                                    ) as HTMLInputElement
                                )?.value,
                                event_code: (
                                    document.getElementById(
                                        "event-code"
                                    ) as HTMLInputElement
                                )?.value,
                                event_description: (
                                    document.getElementById(
                                        "event-description"
                                    ) as HTMLTextAreaElement
                                )?.value,
                                location: (
                                    document.getElementById(
                                        "event-location"
                                    ) as HTMLInputElement
                                )?.value,
                                points_to_reward:
                                    parseInt(
                                        (
                                            document.getElementById(
                                                "event-points"
                                            ) as HTMLInputElement
                                        )?.value
                                    ) || 0,
                                start_date: (
                                    document.getElementById(
                                        "event-start-date"
                                    ) as HTMLInputElement
                                )?.value,
                                end_date: (
                                    document.getElementById(
                                        "event-end-date"
                                    ) as HTMLInputElement
                                )?.value,
                                published: (
                                    document.getElementById(
                                        "event-published"
                                    ) as HTMLInputElement
                                )?.checked,
                                has_food: (
                                    document.getElementById(
                                        "event-has-food"
                                    ) as HTMLInputElement
                                )?.checked,
                            };

                            // Handle file uploads if any
                            const fileInput = document.getElementById(
                                "event-files"
                            ) as HTMLInputElement;
                            if (fileInput?.files?.length) {
                                const formData = new FormData();
                                for (const file of fileInput.files) {
                                    formData.append("files", file);
                                }
                                // Note: You'll need to implement file upload handling here
                                // This might require a separate API endpoint or PocketBase method
                            }

                            // Update event
                            await update.updateFields(
                                Collections.EVENTS,
                                eventId,
                                updateData
                            );

                            // Log the action
                            await logAdminAction(
                                "update",
                                "events",
                                `Updated event ${eventId}`
                            );

                            // Close modal
                            modal?.classList.remove("modal-open");

                            // Show success toast
                            showToast("Event updated successfully", "success");

                            // Refresh data
                            refreshData();
                        } catch (error) {
                            console.error("Error updating event:", error);
                            showToast("Failed to update event", "error");
                        }
                    });
            };

            // Reimbursement review buttons
            document
                .querySelectorAll("[data-reimbursement-id]")
                .forEach((button) => {
                    button.addEventListener("click", async (e) => {
                        const target = e.currentTarget as HTMLElement;
                        const reimbursementId = target.getAttribute(
                            "data-reimbursement-id"
                        );

                        if (!reimbursementId) return;

                        try {
                            const { Authentication } = await import(
                                "../../scripts/pocketbase/Authentication"
                            );
                            const { Get } = await import(
                                "../../scripts/pocketbase/Get"
                            );
                            const { Collections } = await import(
                                "../../schemas/pocketbase"
                            );

                            const auth = Authentication.getInstance();
                            const get = Get.getInstance();

                            // Show loading state
                            showToast(
                                "Loading reimbursement details...",
                                "info"
                            );

                            // Get reimbursement with user expansion
                            const reimbursement = await get.getOne(
                                Collections.REIMBURSEMENTS,
                                reimbursementId,
                                { expand: "submitted_by" }
                            );
                            openReimbursementModal(reimbursement);
                        } catch (error) {
                            console.error(
                                "Error fetching reimbursement:",
                                error
                            );
                            showToast(
                                "Failed to load reimbursement details",
                                "error"
                            );
                        }
                    });
                });

            // Function to open reimbursement modal
            const openReimbursementModal = (reimbursement: any) => {
                let modal = document.getElementById("reimbursement-modal");
                if (!modal) {
                    modal = document.createElement("div");
                    modal.id = "reimbursement-modal";
                    modal.className = "modal";
                    document.body.appendChild(modal);
                }

                const purchaseDate = new Date(reimbursement.date_of_purchase);
                const formattedDate = purchaseDate.toLocaleDateString("en-US", {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                });

                const userName =
                    reimbursement.expand?.submitted_by?.name || "Unknown User";

                modal.innerHTML = `
                    <div class="modal-box">
                        <h3 class="font-bold text-lg">Review Reimbursement</h3>
                        <div class="py-4">
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <p class="text-sm opacity-70">Title</p>
                                    <p class="font-semibold">${reimbursement.title}</p>
                                </div>
                                <div>
                                    <p class="text-sm opacity-70">Amount</p>
                                    <p class="font-semibold">$${reimbursement.total_amount.toFixed(2)}</p>
                                </div>
                                <div>
                                    <p class="text-sm opacity-70">Submitted By</p>
                                    <p class="font-semibold">${userName}</p>
                                </div>
                                <div>
                                    <p class="text-sm opacity-70">Date of Purchase</p>
                                    <p class="font-semibold">${formattedDate}</p>
                                </div>
                                <div>
                                    <p class="text-sm opacity-70">Payment Method</p>
                                    <p class="font-semibold">${reimbursement.payment_method}</p>
                                </div>
                                <div>
                                    <p class="text-sm opacity-70">Department</p>
                                    <p class="font-semibold">${reimbursement.department}</p>
                                </div>
                            </div>
                            
                            <div class="mt-4">
                                <p class="text-sm opacity-70">Additional Information</p>
                                <p>${reimbursement.additional_info || "None provided"}</p>
                            </div>
                            
                            <div class="mt-4">
                                <p class="text-sm opacity-70">Current Status</p>
                                <div class="badge ${
                                    reimbursement.status === "approved"
                                        ? "badge-success"
                                        : reimbursement.status === "rejected"
                                          ? "badge-error"
                                          : reimbursement.status === "paid"
                                            ? "badge-info"
                                            : "badge-warning"
                                }">${reimbursement.status}</div>
                            </div>
                            
                            <div class="divider"></div>
                            
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Update Status</span>
                                </label>
                                <select id="status-select" class="select select-bordered w-full">
                                    <option value="submitted" ${reimbursement.status === "submitted" ? "selected" : ""}>Submitted</option>
                                    <option value="under_review" ${reimbursement.status === "under_review" ? "selected" : ""}>Under Review</option>
                                    <option value="approved" ${reimbursement.status === "approved" ? "selected" : ""}>Approved</option>
                                    <option value="rejected" ${reimbursement.status === "rejected" ? "selected" : ""}>Rejected</option>
                                    <option value="in_progress" ${reimbursement.status === "in_progress" ? "selected" : ""}>In Progress</option>
                                    <option value="paid" ${reimbursement.status === "paid" ? "selected" : ""}>Paid</option>
                                </select>
                            </div>
                            
                            <div class="form-control mt-4">
                                <label class="label">
                                    <span class="label-text">Audit Notes</span>
                                </label>
                                <textarea id="audit-notes" class="textarea textarea-bordered h-24" placeholder="Add notes about this reimbursement">${reimbursement.audit_notes || ""}</textarea>
                            </div>
                        </div>
                        <div class="modal-action">
                            <button class="btn" onclick="document.getElementById('reimbursement-modal').classList.remove('modal-open')">Cancel</button>
                            <button id="save-reimbursement" class="btn btn-primary" data-id="${reimbursement.id}">Save Changes</button>
                        </div>
                    </div>
                `;

                modal.classList.add("modal-open");

                // Add event listener to save button
                document
                    .getElementById("save-reimbursement")
                    ?.addEventListener("click", async () => {
                        const reimbursementId = document
                            .getElementById("save-reimbursement")
                            ?.getAttribute("data-id");
                        const statusSelect = document.getElementById(
                            "status-select"
                        ) as HTMLSelectElement;
                        const auditNotes = document.getElementById(
                            "audit-notes"
                        ) as HTMLTextAreaElement;

                        if (!reimbursementId || !statusSelect || !auditNotes)
                            return;

                        const newStatus = statusSelect.value;
                        const notes = auditNotes.value;

                        try {
                            const { Authentication } = await import(
                                "../../scripts/pocketbase/Authentication"
                            );
                            const { Update } = await import(
                                "../../scripts/pocketbase/Update"
                            );
                            const { Collections } = await import(
                                "../../schemas/pocketbase"
                            );

                            const auth = Authentication.getInstance();
                            const update = Update.getInstance();

                            // Create audit log entry
                            const currentUser = auth.getCurrentUser();
                            const currentTime = new Date().toISOString();

                            // Parse existing audit logs or create new array
                            let auditLogs = [];
                            if (reimbursement.audit_logs) {
                                try {
                                    auditLogs = JSON.parse(
                                        reimbursement.audit_logs
                                    );
                                } catch (e) {
                                    console.warn(
                                        "Failed to parse existing audit logs:",
                                        e
                                    );
                                }
                            }

                            // Add new log entry
                            auditLogs.push({
                                timestamp: currentTime,
                                user_id: currentUser.id,
                                user_name: currentUser.name,
                                action: `Status changed from "${reimbursement.status}" to "${newStatus}"`,
                                notes: notes,
                            });

                            // Update reimbursement
                            await update.updateFields(
                                Collections.REIMBURSEMENTS,
                                reimbursementId,
                                {
                                    status: newStatus,
                                    audit_notes: notes,
                                    audit_logs: JSON.stringify(auditLogs),
                                }
                            );

                            // Log the action
                            await logAdminAction(
                                "update",
                                "reimbursements",
                                `Updated reimbursement ${reimbursementId} status to "${newStatus}"`
                            );

                            // Close modal
                            modal?.classList.remove("modal-open");

                            // Show success toast
                            showToast(
                                "Reimbursement updated successfully",
                                "success"
                            );

                            // Refresh data
                            refreshData();
                        } catch (error) {
                            console.error(
                                "Error updating reimbursement:",
                                error
                            );
                            showToast(
                                "Failed to update reimbursement",
                                "error"
                            );
                        }
                    });
            };
        };

        // Setup action handlers when the page loads
        setupActionHandlers();

        // Function to log admin actions to system logs
        const logAdminAction = async (
            type: string,
            part: string,
            message: string
        ) => {
            try {
                const { Authentication } = await import(
                    "../../scripts/pocketbase/Authentication"
                );
                const { Update } = await import(
                    "../../scripts/pocketbase/Update"
                );
                const { Collections } = await import(
                    "../../schemas/pocketbase"
                );

                const auth = Authentication.getInstance();
                const update = Update.getInstance();

                if (!auth.isAuthenticated()) return;

                const userId = auth.getUserId();
                if (!userId) return;

                // Create log entry
                await update.create(Collections.LOGS, {
                    user: userId,
                    type: type,
                    part: part,
                    message: message,
                });
            } catch (error) {
                console.error("Error logging admin action:", error);
            }
        };

        // Function to show toast notifications
        const showToast = (() => {
            let currentToast: HTMLDivElement | null = null;
            let timeoutId: number | null = null;

            return (
                message: string,
                type: "success" | "error" | "info" = "info"
            ) => {
                // Clear existing toast if present
                if (currentToast) {
                    currentToast.remove();
                    if (timeoutId) clearTimeout(timeoutId);
                }

                // Create toast container if it doesn't exist
                let toastContainer = document.getElementById("toast-container");
                if (!toastContainer) {
                    toastContainer = document.createElement("div");
                    toastContainer.id = "toast-container";
                    toastContainer.className = "toast toast-top toast-end z-50";
                    document.body.appendChild(toastContainer);
                }

                // Create new toast
                const toast = document.createElement("div");
                toast.className = `alert ${type === "success" ? "alert-success" : type === "error" ? "alert-error" : "alert-info"} shadow-lg`;
                toast.innerHTML = `
                    <div>
                        <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${type === "success" ? "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" : type === "error" ? "M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" : "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"}" />
                        </svg>
                        <span>${message}</span>
                    </div>
                `;

                // Add toast to container
                toastContainer.appendChild(toast);
                currentToast = toast;

                // Remove toast after 3 seconds
                timeoutId = window.setTimeout(() => {
                    toast.classList.add("fade-out");
                    setTimeout(() => {
                        toast.remove();
                        currentToast = null;
                    }, 300);
                }, 3000);
            };
        })();

        // Debug function to check stats elements
        const debugStatsElements = () => {
            const statElements = [
                { selector: ".text-primary.text-3xl", label: "Users" },
                { selector: ".text-secondary.text-3xl", label: "Officers" },
                { selector: ".text-accent.text-3xl", label: "Events" },
                {
                    selector: ".text-success.text-3xl",
                    label: "Upcoming Events",
                },
                { selector: ".text-info.text-3xl", label: "Reimbursements" },
                {
                    selector: ".text-warning.text-3xl",
                    label: "Pending Reimbursements",
                },
            ];

            console.log("Checking stat elements:");
            statElements.forEach((item) => {
                const element = document.querySelector(item.selector);
                console.log(
                    `${item.label} (${item.selector}): ${element ? "Found" : "Not found"}`
                );
            });
        };

        // Call debug function after DOM is loaded
        debugStatsElements();

        // Add event listener to refresh button
        document
            .getElementById("refreshDashboardBtn")
            ?.addEventListener("click", async () => {
                console.log("Manual refresh triggered");
                const button = document.getElementById(
                    "refreshDashboardBtn"
                ) as HTMLButtonElement;
                if (button) {
                    button.classList.add("loading");
                    button.disabled = true;
                }

                try {
                    await refreshData();
                    showToast("Dashboard refreshed successfully", "success");
                } catch (error) {
                    console.error("Error refreshing dashboard:", error);
                    showToast("Failed to refresh dashboard", "error");
                } finally {
                    if (button) {
                        button.classList.remove("loading");
                        button.disabled = false;
                    }
                }
            });

        // Add loading state management functions
        const showLoading = (tableId: string) => {
            const tableBody = document.querySelector(`#${tableId} table tbody`);
            if (!tableBody) return;

            const skeletons = tableBody.querySelectorAll(".loading-skeleton");
            skeletons.forEach((skeleton) =>
                skeleton.classList.remove("hidden")
            );

            // Hide actual data rows while loading
            const dataRows = tableBody.querySelectorAll(
                "tr:not(.loading-skeleton)"
            );
            dataRows.forEach((row) => row.classList.add("hidden"));
        };

        const hideLoading = (tableId: string) => {
            const tableBody = document.querySelector(`#${tableId} table tbody`);
            if (!tableBody) return;

            // Hide skeletons
            const skeletons = tableBody.querySelectorAll(".loading-skeleton");
            skeletons.forEach((skeleton) => skeleton.classList.add("hidden"));

            // Show actual data rows
            const dataRows = tableBody.querySelectorAll(
                "tr:not(.loading-skeleton)"
            );
            dataRows.forEach((row) => row.classList.remove("hidden"));
        };

        // Modify refreshData to use loading states
        const refreshData = async () => {
            try {
                console.log("Refreshing dashboard data...");

                const { Authentication } = await import(
                    "../../scripts/pocketbase/Authentication"
                );
                const { Get } = await import("../../scripts/pocketbase/Get");
                const { Collections } = await import(
                    "../../schemas/pocketbase"
                );

                const auth = Authentication.getInstance();
                const get = Get.getInstance();

                if (!auth.isAuthenticated()) {
                    console.error(
                        "Cannot refresh data: User is not authenticated"
                    );
                    return;
                }

                // Show loading state for all sections
                showLoading("userSection");
                showLoading("eventSection");
                showLoading("financeSection");

                // Update stats
                console.log("Fetching updated stats...");

                // Fetch users count
                console.log("Fetching users count...");
                const usersResponse = await get.getList(
                    Collections.USERS,
                    1,
                    1
                );
                console.log(`Users count: ${usersResponse.totalItems}`);

                // Fetch officers count
                console.log("Fetching officers count...");
                const officersResponse = await get.getList(
                    Collections.OFFICERS,
                    1,
                    1
                );
                console.log(`Officers count: ${officersResponse.totalItems}`);

                // Fetch events count
                console.log("Fetching events count...");
                const eventsResponse = await get.getList(
                    Collections.EVENTS,
                    1,
                    1
                );
                console.log(`Events count: ${eventsResponse.totalItems}`);

                // Fetch upcoming events count
                console.log("Fetching upcoming events count...");
                const upcomingEventsResponse = await get.getList(
                    Collections.EVENTS,
                    1,
                    1,
                    `start_date > "${new Date().toISOString()}" && published = true`
                );
                console.log(
                    `Upcoming events count: ${upcomingEventsResponse.totalItems}`
                );

                // Fetch reimbursements count
                console.log("Fetching reimbursements count...");
                const reimbursementsResponse = await get.getList(
                    Collections.REIMBURSEMENTS,
                    1,
                    1
                );
                console.log(
                    `Reimbursements count: ${reimbursementsResponse.totalItems}`
                );

                // Fetch pending reimbursements count
                console.log("Fetching pending reimbursements count...");
                const pendingReimbursementsResponse = await get.getList(
                    Collections.REIMBURSEMENTS,
                    1,
                    1,
                    `status = "submitted" || status = "under_review"`
                );
                console.log(
                    `Pending reimbursements count: ${pendingReimbursementsResponse.totalItems}`
                );

                const stats = [
                    usersResponse,
                    officersResponse,
                    eventsResponse,
                    upcomingEventsResponse,
                    reimbursementsResponse,
                    pendingReimbursementsResponse,
                ];

                // Update UI with new stats
                const userCountElement = document.querySelector(
                    ".text-primary.text-3xl"
                );
                if (userCountElement) {
                    userCountElement.textContent =
                        stats[0].totalItems.toString();
                    console.log(
                        `Updated user count display: ${stats[0].totalItems}`
                    );
                }

                const officerCountElement = document.querySelector(
                    ".text-secondary.text-3xl"
                );
                if (officerCountElement) {
                    officerCountElement.textContent =
                        stats[1].totalItems.toString();
                    console.log(
                        `Updated officer count display: ${stats[1].totalItems}`
                    );
                }

                const eventCountElement = document.querySelector(
                    ".text-accent.text-3xl"
                );
                if (eventCountElement) {
                    eventCountElement.textContent =
                        stats[2].totalItems.toString();
                    console.log(
                        `Updated event count display: ${stats[2].totalItems}`
                    );
                }

                const upcomingEventsElement = document.querySelector(
                    ".text-success.text-3xl"
                );
                if (upcomingEventsElement) {
                    upcomingEventsElement.textContent =
                        stats[3].totalItems.toString();
                    console.log(
                        `Updated upcoming events display: ${stats[3].totalItems}`
                    );
                }

                const reimbursementCountElement = document.querySelector(
                    ".text-info.text-3xl"
                );
                if (reimbursementCountElement) {
                    reimbursementCountElement.textContent =
                        stats[4].totalItems.toString();
                    console.log(
                        `Updated reimbursement count display: ${stats[4].totalItems}`
                    );
                }

                const pendingReimbursementsElement = document.querySelector(
                    ".text-warning.text-3xl"
                );
                if (pendingReimbursementsElement) {
                    pendingReimbursementsElement.textContent =
                        stats[5].totalItems.toString();
                    console.log(
                        `Updated pending reimbursements display: ${stats[5].totalItems}`
                    );
                }

                // Now fetch the actual data for tables
                console.log("Fetching data for tables...");

                // Fetch and update users table
                console.log("Fetching users for table...");
                const usersTableResponse = await get.getList(
                    Collections.USERS,
                    1,
                    50,
                    "",
                    "-created"
                );
                console.log(
                    `Fetched ${usersTableResponse.items.length} users for table`
                );
                updateUsersTable(usersTableResponse.items);
                hideLoading("userSection");

                // Fetch and update events table
                console.log("Fetching events for table...");
                const eventsTableResponse = await get.getList(
                    Collections.EVENTS,
                    1,
                    50,
                    "",
                    "-start_date"
                );
                console.log(
                    `Fetched ${eventsTableResponse.items.length} events for table`
                );
                updateEventsTable(eventsTableResponse.items);
                hideLoading("eventSection");

                // Fetch and update reimbursements table
                console.log("Fetching reimbursements for table...");
                const reimbursementsTableResponse = await get.getList(
                    Collections.REIMBURSEMENTS,
                    1,
                    50,
                    "",
                    "-created",
                    { expand: "submitted_by" }
                );
                console.log(
                    `Fetched ${reimbursementsTableResponse.items.length} reimbursements for table`
                );
                updateReimbursementsTable(reimbursementsTableResponse.items);
                hideLoading("financeSection");

                console.log("Dashboard data refresh complete");
            } catch (error) {
                console.error("Error refreshing dashboard data:", error);
                // Hide loading states on error
                hideLoading("userSection");
                hideLoading("eventSection");
                hideLoading("financeSection");
                throw error;
            }
        };

        // Function to update users table
        const updateUsersTable = (users: any[]) => {
            try {
                // Local formatDate function
                const formatLocalDate = (dateString: string) => {
                    const date = new Date(dateString);
                    return date.toLocaleDateString("en-US", {
                        year: "numeric",
                        month: "short",
                        day: "numeric",
                        hour: "2-digit",
                        minute: "2-digit",
                    });
                };

                const userTableBody = document.querySelector(
                    "#userSection table tbody"
                );
                if (!userTableBody) {
                    console.error("User table body not found");
                    return;
                }

                // Clear existing rows
                userTableBody.innerHTML = "";

                if (users.length === 0) {
                    const emptyRow = document.createElement("tr");
                    emptyRow.innerHTML = `<td colspan="5" class="text-center">No users found</td>`;
                    userTableBody.appendChild(emptyRow);
                    return;
                }

                // Add new rows
                users.forEach((user) => {
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${user.name || "N/A"}</td>
                        <td>${user.email || "N/A"}</td>
                        <td>${user.member_id || "Member"}</td>
                        <td>${user.last_login ? formatLocalDate(user.last_login) : "Never"}</td>
                        <td>
                            <div class="flex gap-2">
                                <button class="btn btn-xs btn-primary" data-user-id="${user.id}">Edit</button>
                                <button class="btn btn-xs btn-error" data-user-id="${user.id}">Delete</button>
                            </div>
                        </td>
                    `;
                    userTableBody.appendChild(row);
                });

                console.log(`Updated users table with ${users.length} rows`);

                // Re-attach event handlers
                setupActionHandlers();
            } catch (error) {
                console.error("Error updating users table:", error);
            }
        };

        // Function to update events table
        const updateEventsTable = (events: any[]) => {
            try {
                // Local formatDate function
                const formatLocalDate = (dateString: string) => {
                    const date = new Date(dateString);
                    return date.toLocaleDateString("en-US", {
                        year: "numeric",
                        month: "short",
                        day: "numeric",
                        hour: "2-digit",
                        minute: "2-digit",
                    });
                };

                const eventTableBody = document.querySelector(
                    "#eventSection table tbody"
                );
                if (!eventTableBody) {
                    console.error("Event table body not found");
                    return;
                }

                // Clear existing rows
                eventTableBody.innerHTML = "";

                if (events.length === 0) {
                    const emptyRow = document.createElement("tr");
                    emptyRow.innerHTML = `<td colspan="5" class="text-center">No events found</td>`;
                    eventTableBody.appendChild(emptyRow);
                    return;
                }

                // Add new rows
                events.forEach((event) => {
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${event.event_name || "N/A"}</td>
                        <td>${formatLocalDate(event.start_date)}</td>
                        <td>${event.location || "N/A"}</td>
                        <td>
                            <div class="badge ${event.published ? "badge-success" : "badge-warning"}">
                                ${event.published ? "Published" : "Draft"}
                            </div>
                        </td>
                        <td>
                            <div class="flex gap-2">
                                <button class="btn btn-xs btn-primary" data-event-id="${event.id}">Edit</button>
                                <button class="btn btn-xs btn-error" data-event-id="${event.id}">Delete</button>
                                <button class="btn btn-xs ${event.published ? "btn-warning" : "btn-success"}" 
                                    data-event-id="${event.id}" 
                                    data-action="toggle-publish" 
                                    data-current-state="${event.published ? "published" : "draft"}">
                                    ${event.published ? "Unpublish" : "Publish"}
                                </button>
                            </div>
                        </td>
                    `;
                    eventTableBody.appendChild(row);
                });

                console.log(`Updated events table with ${events.length} rows`);

                // Re-attach event handlers
                setupActionHandlers();
            } catch (error) {
                console.error("Error updating events table:", error);
            }
        };

        // Function to update reimbursements table
        const updateReimbursementsTable = (reimbursements: any[]) => {
            try {
                const reimbursementTableBody = document.querySelector(
                    "#financeSection table tbody"
                );
                if (!reimbursementTableBody) {
                    console.error("Reimbursement table body not found");
                    return;
                }

                // Clear existing rows
                reimbursementTableBody.innerHTML = "";

                if (reimbursements.length === 0) {
                    const emptyRow = document.createElement("tr");
                    emptyRow.innerHTML = `<td colspan="5" class="text-center">No reimbursements found</td>`;
                    reimbursementTableBody.appendChild(emptyRow);
                    return;
                }

                // Add new rows
                reimbursements.forEach((reimbursement) => {
                    const userName =
                        reimbursement.expand?.submitted_by?.name ||
                        "Unknown User";

                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${reimbursement.title || "N/A"}</td>
                        <td>$${reimbursement.total_amount.toFixed(2)}</td>
                        <td>${userName}</td>
                        <td>
                            <div class="badge ${
                                reimbursement.status === "approved"
                                    ? "badge-success"
                                    : reimbursement.status === "rejected"
                                      ? "badge-error"
                                      : reimbursement.status === "paid"
                                        ? "badge-info"
                                        : "badge-warning"
                            }">
                                ${reimbursement.status}
                            </div>
                        </td>
                        <td>
                            <div class="flex gap-2">
                                <button class="btn btn-xs btn-primary" data-reimbursement-id="${reimbursement.id}">Review</button>
                            </div>
                        </td>
                    `;
                    reimbursementTableBody.appendChild(row);
                });

                console.log(
                    `Updated reimbursements table with ${reimbursements.length} rows`
                );

                // Re-attach event handlers
                setupActionHandlers();
            } catch (error) {
                console.error("Error updating reimbursements table:", error);
            }
        };

        // Initial data refresh
        refreshData().catch((error: unknown) => {
            console.error("Error during initial data refresh:", error);
        });

        // Setup action handlers when the page loads
        setupActionHandlers();

        // Refresh every 5 minutes
        setInterval(refreshData, 5 * 60 * 1000);

        // Debug: Check if tab content sections exist
        console.log("Checking tab content sections:");
        ["userSection", "eventSection", "financeSection", "logSection"].forEach(
            (id) => {
                const section = document.getElementById(id);
                console.log(`${id}: ${section ? "Found" : "Not found"}`);

                if (section) {
                    // Check if the section is visible
                    const isHidden = section.classList.contains("hidden");
                    const parentElement = section.parentElement;
                    console.log(
                        `${id} is ${isHidden ? "hidden" : "visible"}, parent: ${parentElement ? parentElement.id || "unnamed" : "none"}`
                    );
                }
            }
        );
    });
</script>

<style>
    .tab-content {
        transition: all 0.3s ease-in-out;
        display: block;
    }
    .tab-content.hidden {
        display: none !important;
    }

    .fade-out {
        opacity: 0;
        transition: opacity 0.3s ease-out;
    }

    #toast-container {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 9999;
    }

    .loading-skeleton {
        opacity: 0.7;
    }

    @keyframes pulse {
        0% {
            opacity: 0.6;
        }
        50% {
            opacity: 0.8;
        }
        100% {
            opacity: 0.6;
        }
    }

    .animate-pulse {
        animation: pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
</style>
