---
import { Icon } from "astro-icon/components";
import { Get } from "../pocketbase/Get";
import { Authentication } from "../pocketbase/Authentication";
import { Update } from "../pocketbase/Update";
import { FileManager } from "../pocketbase/FileManager";
import { SendLog } from "../pocketbase/SendLog";

// Get instances
const get = Get.getInstance();
const auth = Authentication.getInstance();
const update = Update.getInstance();
const fileManager = FileManager.getInstance();
const sendLog = SendLog.getInstance();

// Interface for Event type
interface Event {
    id: string;
    event_name: string;
    event_description: string;
    event_code: string;
    location: string;
    files: string[];
    points_to_reward: number;
    start_date: string;
    end_date: string;
    published: boolean;
    has_food: boolean;
    attendees: AttendeeEntry[];
}

interface AttendeeEntry {
    user_id: string;
    time_checked_in: string;
    food: string;
}

interface ListResponse<T> {
    page: number;
    perPage: number;
    totalItems: number;
    totalPages: number;
    items: T[];
}

// Initialize variables
let eventResponse: ListResponse<Event> = {
    page: 1,
    perPage: 5,
    totalItems: 0,
    totalPages: 0,
    items: [],
};
let upcomingEvents: Event[] = [];

// Fetch events
try {
    if (auth.isAuthenticated()) {
        eventResponse = await get.getList<Event>(
            "events",
            1,
            5,
            "",
            "-start_date"
        );
        upcomingEvents = eventResponse.items;
    }
} catch (error) {
    console.error("Failed to fetch events:", error);
}

const totalEvents = eventResponse.totalItems;
const totalPages = eventResponse.totalPages;
const currentPage = eventResponse.page;

// Add type declaration for window
declare global {
    interface Window {
        [key: string]: any;
        openEditModal: (event?: any) => void;
        deleteFile: (eventId: string, filename: string) => void;
        previewFile: (url: string, filename: string) => void;
        openDetailsModal: (event: Event) => void;
        showFilePreview: (file: {
            url: string;
            type: string;
            name: string;
        }) => void;
        backToFileList: () => void;
        handlePreviewError: () => void;
        showLoading: () => void;
        hideLoading: () => void;
        deleteEvent: (eventId: string, eventName: string) => Promise<void>;
        resetAndCloseModal: () => void;
    }
}
---

<div id="eventManagementSection" class="dashboard-section hidden">
    <div class="mb-6 flex justify-between items-center">
        <div>
            <h2 class="text-2xl font-bold">Event Management</h2>
            <p class="opacity-70">Manage and create IEEE UCSD events</p>
        </div>
        <button class="btn btn-primary gap-2" onclick="window.openEditModal()">
            <Icon name="heroicons:plus" class="h-5 w-5" />
            Add New Event
        </button>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div
            class="stats shadow-lg bg-base-100 rounded-2xl border border-base-200 hover:border-primary transition-all duration-300 hover:-translate-y-1 transform"
        >
            <div class="stat">
                <div class="stat-title font-medium opacity-80">
                    Total Events
                </div>
                <div class="stat-value text-primary" id="totalEvents">-</div>
                <div class="stat-desc flex items-center gap-2 mt-1">
                    <div class="badge badge-primary badge-sm" id="quarterLabel">
                        Current Academic Term
                    </div>
                </div>
            </div>
        </div>
        <div
            class="stats shadow-lg bg-base-100 rounded-2xl border border-base-200 hover:border-secondary transition-all duration-300 hover:-translate-y-1 transform"
        >
            <div class="stat">
                <div class="stat-title font-medium opacity-80">
                    Unique Attendees
                </div>
                <div class="stat-value text-secondary" id="uniqueAttendees">
                    -
                </div>
                <div class="stat-desc flex items-center gap-2 mt-1">
                    <div class="badge badge-secondary badge-sm">
                        Current Academic Term
                    </div>
                </div>
            </div>
        </div>
        <div
            class="stats shadow-lg bg-base-100 rounded-2xl border border-base-200 hover:border-accent transition-all duration-300 hover:-translate-y-1 transform"
        >
            <div class="stat">
                <div class="stat-title font-medium opacity-80">
                    Recurring Attendees
                </div>
                <div class="stat-value text-accent" id="recurringAttendees">
                    -
                </div>
                <div class="stat-desc flex items-center gap-2 mt-1">
                    <div class="badge badge-accent badge-sm">
                        Current Quarter (<span id="quarterName">-</span>)
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Events List -->
    <div
        class="card bg-base-100 shadow-lg border border-base-200 hover:border-primary transition-all duration-300"
    >
        <div class="card-body">
            <h3 class="card-title text-xl font-bold flex items-center gap-3">
                <div class="badge badge-primary p-3">
                    <Icon name="heroicons:calendar" class="h-5 w-5" />
                </div>
                Events List
            </h3>
            <div class="divider"></div>

            <!-- Filter Controls -->
            <div class="flex flex-col gap-4 mb-4">
                <!-- Time Filters -->
                <div class="flex flex-wrap gap-4">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium"
                                >Time Filter</span
                            >
                        </label>
                        <div class="join">
                            <input
                                type="radio"
                                name="timeFilter"
                                value="all"
                                class="join-item btn btn-sm"
                                checked
                                aria-label="All Years"
                            />
                            <input
                                type="radio"
                                name="timeFilter"
                                value="upcoming"
                                class="join-item btn btn-sm"
                                aria-label="Upcoming"
                            />
                            <input
                                type="radio"
                                name="timeFilter"
                                value="past"
                                class="join-item btn btn-sm"
                                aria-label="Past"
                            />
                        </div>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium">Year</span>
                        </label>
                        <select
                            id="yearFilter"
                            class="select select-bordered select-sm"
                        >
                            <option value="all">All Years</option>
                            <!-- Years will be populated dynamically -->
                        </select>
                    </div>
                </div>

                <!-- Other Filters -->
                <div class="flex flex-wrap gap-4">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium">Published</span
                            >
                        </label>
                        <select
                            id="publishedFilter"
                            class="select select-bordered select-sm"
                        >
                            <option value="all">All</option>
                            <option value="yes">Yes</option>
                            <option value="no">No</option>
                        </select>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium">Has Files</span
                            >
                        </label>
                        <select
                            id="hasFilesFilter"
                            class="select select-bordered select-sm"
                        >
                            <option value="all">All</option>
                            <option value="yes">Yes</option>
                            <option value="no">No</option>
                        </select>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium">Has Food</span>
                        </label>
                        <select
                            id="hasFoodFilter"
                            class="select select-bordered select-sm"
                        >
                            <option value="all">All</option>
                            <option value="yes">Yes</option>
                            <option value="no">No</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Search and Per Page Controls -->
            <div class="flex flex-col md:flex-row gap-4 mb-4">
                <div class="form-control flex-1">
                    <div class="join w-full">
                        <div
                            class="join-item bg-base-200 flex items-center px-3"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-5 w-5 opacity-70"
                                viewBox="0 0 20 20"
                                fill="currentColor"
                            >
                                <path
                                    fill-rule="evenodd"
                                    d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                                    clip-rule="evenodd"></path>
                            </svg>
                        </div>
                        <input
                            type="text"
                            id="searchInput"
                            placeholder="Search events..."
                            class="input input-bordered join-item w-full"
                        />
                    </div>
                </div>
                <div class="form-control w-full md:w-auto">
                    <div class="join">
                        <div
                            class="join-item bg-base-200 flex items-center px-3"
                        >
                            Per Page
                        </div>
                        <select
                            id="perPageSelect"
                            class="select select-bordered join-item"
                        >
                            <option value="5">5</option>
                            <option value="10">10</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Event Items -->
            <div class="space-y-4" id="eventsList">
                <div class="text-center py-8 text-base-content/70">
                    <Icon
                        name="heroicons:calendar"
                        class="h-12 w-12 mx-auto mb-4 opacity-50"
                    />
                    <p>Loading events...</p>
                </div>
            </div>

            <!-- Pagination -->
            <div class="flex justify-center mt-6" id="paginationContainer">
                <div class="join">
                    <button class="join-item btn btn-sm" id="firstPageBtn"
                        >«</button
                    >
                    <button class="join-item btn btn-sm" id="prevPageBtn"
                        >‹</button
                    >
                    <button class="join-item btn btn-sm"
                        >Page <span id="currentPageNumber">1</span></button
                    >
                    <button class="join-item btn btn-sm" id="nextPageBtn"
                        >›</button
                    >
                    <button class="join-item btn btn-sm" id="lastPageBtn"
                        >»</button
                    >
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Event Modal -->
<dialog id="editEventModal" class="modal">
    <div class="modal-box max-w-2xl">
        <h3 class="font-bold text-lg mb-4" id="editModalTitle">Edit Event</h3>
        <form id="editEventForm" class="space-y-4">
            <input type="hidden" id="editEventId" />

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Event Name -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Event Name</span>
                        <span class="label-text-alt text-error">*</span>
                    </label>
                    <input
                        type="text"
                        id="editEventName"
                        name="editEventName"
                        class="input input-bordered"
                        required
                    />
                </div>

                <!-- Event Code -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Event Code</span>
                        <span class="label-text-alt text-error">*</span>
                    </label>
                    <input
                        type="text"
                        id="editEventCode"
                        name="editEventCode"
                        class="input input-bordered"
                        required
                    />
                </div>

                <!-- Location -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Location</span>
                        <span class="label-text-alt text-error">*</span>
                    </label>
                    <input
                        type="text"
                        id="editEventLocation"
                        name="editEventLocation"
                        class="input input-bordered"
                        required
                    />
                </div>

                <!-- Points to Reward -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Points to Reward</span>
                        <span class="label-text-alt text-error">*</span>
                    </label>
                    <input
                        type="number"
                        id="editEventPoints"
                        name="editEventPoints"
                        class="input input-bordered"
                        min="0"
                        required
                    />
                </div>

                <!-- Start Date -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Start Date</span>
                        <span class="label-text-alt text-error">*</span>
                    </label>
                    <input
                        type="datetime-local"
                        id="editEventStartDate"
                        name="editEventStartDate"
                        class="input input-bordered"
                        required
                    />
                </div>

                <!-- End Date -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">End Date</span>
                        <span class="label-text-alt text-error">*</span>
                    </label>
                    <input
                        type="datetime-local"
                        id="editEventEndDate"
                        name="editEventEndDate"
                        class="input input-bordered"
                        required
                    />
                </div>
            </div>

            <!-- Description -->
            <div class="form-control">
                <label class="label">
                    <span class="label-text">Description</span>
                    <span class="label-text-alt text-error">*</span>
                </label>
                <textarea
                    id="editEventDescription"
                    name="editEventDescription"
                    class="textarea textarea-bordered"
                    rows="3"
                    required></textarea>
            </div>

            <!-- Files -->
            <div class="form-control">
                <label class="label">
                    <span class="label-text">Upload Files</span>
                </label>
                <input
                    type="file"
                    id="editEventFiles"
                    class="file-input file-input-bordered"
                    multiple
                />
                <div class="mt-4 space-y-2">
                    <div id="newFiles" class="space-y-2">
                        <!-- New files will be listed here -->
                    </div>
                    <div class="divider">Current Files</div>
                    <div id="currentFiles" class="space-y-2">
                        <!-- Current files will be listed here -->
                    </div>
                </div>
            </div>

            <!-- Published -->
            <div class="form-control">
                <label class="label cursor-pointer justify-start gap-4">
                    <input
                        type="checkbox"
                        id="editEventPublished"
                        name="editEventPublished"
                        class="toggle"
                    />
                    <span class="label-text">Publish Event</span>
                </label>
                <label class="label">
                    <span class="label-text-alt text-info"
                        >This has to be clicked if you want to make this event
                        available to the public</span
                    >
                </label>
            </div>

            <!-- Has Food -->
            <div class="form-control">
                <label class="label cursor-pointer justify-start gap-4">
                    <input
                        type="checkbox"
                        id="editEventHasFood"
                        name="editEventHasFood"
                        class="toggle"
                    />
                    <span class="label-text">Has Food</span>
                </label>
                <label class="label">
                    <span class="label-text-alt text-info"
                        >Check this if food will be provided at the event</span
                    >
                </label>
            </div>

            <div class="modal-action">
                <button type="submit" class="btn btn-primary"
                    >Save Changes</button
                >
                <button
                    type="button"
                    class="btn"
                    onclick="editEventModal.close()">Cancel</button
                >
            </div>
        </form>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>

<!-- Event Details Modal -->
<dialog id="eventDetailsModal" class="modal">
    <div class="modal-box max-w-4xl">
        <div class="flex justify-between items-center mb-4">
            <div class="flex items-center gap-3">
                <h3 class="font-bold text-lg" id="modalTitle">Event Details</h3>
            </div>
            <button
                class="btn btn-circle btn-ghost"
                onclick="eventDetailsModal.close()"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-6 w-6"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>

        <div class="tabs tabs-boxed mb-4">
            <button class="tab tab-active" data-tab="files">Files</button>
            <button class="tab" data-tab="attendees">Attendees</button>
        </div>

        <div id="filesContent" class="space-y-4">
            <!-- Files list will be populated here -->
        </div>

        <div id="attendeesContent" class="space-y-4 hidden">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">Event Attendees</h3>
                <button
                    id="downloadAttendeesCSV"
                    class="btn btn-primary btn-sm gap-2"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-4 w-4"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                    >
                        <path
                            fill-rule="evenodd"
                            d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z"
                            clip-rule="evenodd"></path>
                    </svg>
                    Download CSV
                </button>
            </div>
            <!-- Attendees list will be populated here -->
        </div>

        <!-- File Preview Section -->
        <div id="filePreviewSection" class="hidden">
            <div class="flex justify-between items-center mb-4">
                <div class="flex items-center gap-3">
                    <button
                        class="btn btn-ghost btn-sm"
                        onclick="backToFileList()"
                    >
                        ← Back
                    </button>
                    <h3 class="font-bold text-lg truncate" id="previewFileName">
                    </h3>
                </div>
            </div>
            <div class="relative" id="previewContainer">
                <div
                    id="loadingSpinner"
                    class="absolute inset-0 flex items-center justify-center bg-base-200 bg-opacity-50 hidden"
                >
                    <span class="loading loading-spinner loading-lg"></span>
                </div>
                <div id="previewContent" class="w-full"></div>
            </div>
        </div>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>

<script>
    import { Get } from "../pocketbase/Get";
    import { Authentication } from "../pocketbase/Authentication";
    import { Update } from "../pocketbase/Update";
    import { FileManager } from "../pocketbase/FileManager";
    import { SendLog } from "../pocketbase/SendLog";

    interface AttendeeEntry {
        user_id: string;
        time_checked_in: string;
        food: string;
    }

    interface Event {
        id: string;
        event_name: string;
        event_description: string;
        event_code: string;
        location: string;
        files: string[];
        points_to_reward: number;
        start_date: string;
        end_date: string;
        published: boolean;
        has_food: boolean;
        attendees: AttendeeEntry[];
    }

    const get = Get.getInstance();
    const auth = Authentication.getInstance();
    const update = Update.getInstance();
    const fileManager = FileManager.getInstance();
    const sendLog = SendLog.getInstance();

    let currentPage = 1;
    let totalPages = 0;
    let searchQuery = "";
    let perPage = 5;
    let quarterlyStats = {
        totalEvents: 0,
        uniqueAttendees: 0,
        recurringAttendees: 0,
    };

    // Add filter state
    let filterState = {
        time: "all",
        year: "all",
        published: "all",
        hasFiles: "all",
        hasFood: "all",
    };

    // Helper function to determine current academic term
    function getCurrentTerm(): { start: Date; end: Date } {
        const now = new Date();
        const year = now.getFullYear();
        let start: Date, end: Date;

        // If we're before September, term started last year
        if (now.getMonth() < 8) {
            // Before September
            start = new Date(year - 1, 8, 1); // Sept 1 of last year
            end = new Date(year, 8, 0); // Aug 31 of current year
        } else {
            start = new Date(year, 8, 1); // Sept 1 of current year
            end = new Date(year + 1, 8, 0); // Aug 31 of next year
        }

        return { start, end };
    }

    // Helper function to determine current quarter
    function getCurrentQuarter(): { start: Date; end: Date } {
        const now = new Date();
        const year = now.getFullYear();
        const month = now.getMonth();
        let start: Date, end: Date;

        // Determine quarter (0-based months: 0-11)
        // Q1: Sept-Dec (8-11)
        // Q2: Jan-Mar (0-2)
        // Q3: Mar-Jun (2-5)
        // Q4: Jun-Sept (5-8)

        if (month >= 8) {
            // Q1: Sept-Dec
            start = new Date(year, 8, 1);
            end = new Date(year, 11, 31);
        } else if (month < 2) {
            // Q2: Jan-Mar
            start = new Date(year, 0, 1);
            end = new Date(year, 2, 31);
        } else if (month < 5) {
            // Q3: Mar-Jun
            start = new Date(year, 2, 1);
            end = new Date(year, 5, 30);
        } else {
            // Q4: Jun-Sept
            start = new Date(year, 5, 1);
            end = new Date(year, 8, 0); // End on Aug 31
        }

        return { start, end };
    }

    // Helper function to get quarter name
    function getQuarterName(): string {
        const month = new Date().getMonth();

        if (month >= 8) {
            // Sept-Dec
            return "Fall";
        } else if (month < 2) {
            // Jan-Mar
            return "Winter";
        } else if (month < 5) {
            // Mar-Jun
            return "Spring";
        } else {
            // Jun-Sept
            return "Summer";
        }
    }

    // Add cache for events
    let cachedEvents: Event[] = [];
    let lastCacheUpdate = 0;
    const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes in milliseconds

    // Function to refresh cache
    async function refreshCache() {
        try {
            const now = Date.now();
            if (
                now - lastCacheUpdate < CACHE_DURATION &&
                cachedEvents.length > 0
            ) {
                return; // Use cached data if it's fresh
            }

            auth.setUpdating(true);
            const response = await get.getAll<Event>("events");
            cachedEvents = response.map((event) =>
                Get.convertUTCToLocal(event)
            );
            lastCacheUpdate = now;

            // Initialize year filter options from cache
            const years = new Set<number>();
            cachedEvents.forEach((event) => {
                const year = new Date(event.start_date).getFullYear();
                years.add(year);
            });

            const yearFilter = document.getElementById(
                "yearFilter"
            ) as HTMLSelectElement;
            if (yearFilter) {
                const sortedYears = Array.from(years).sort((a, b) => b - a);
                yearFilter.innerHTML =
                    '<option value="all">All Years</option>' +
                    sortedYears
                        .map(
                            (year) => `<option value="${year}">${year}</option>`
                        )
                        .join("");

                if (filterState.year !== "all") {
                    yearFilter.value = filterState.year;
                }
            }
        } catch (error) {
            console.error("Failed to refresh cache:", error);
            throw error;
        } finally {
            auth.setUpdating(false);
        }
    }

    // Function to apply filters to cached data
    function filterEvents(events: Event[]): Event[] {
        return events.filter((event) => {
            const now = new Date().toISOString();

            // Time and Year filters
            if (filterState.time === "upcoming" && event.start_date < now)
                return false;
            if (filterState.time === "past" && event.start_date >= now)
                return false;

            if (filterState.year !== "all") {
                const eventYear = new Date(event.start_date).getFullYear();
                if (eventYear.toString() !== filterState.year) return false;
            }

            // Published filter
            if (filterState.published !== "all") {
                if ((filterState.published === "yes") !== event.published)
                    return false;
            }

            // Has Files filter
            if (filterState.hasFiles !== "all") {
                const hasFiles = event.files && event.files.length > 0;
                if ((filterState.hasFiles === "yes") !== hasFiles) return false;
            }

            // Has Food filter
            if (filterState.hasFood !== "all") {
                if ((filterState.hasFood === "yes") !== event.has_food)
                    return false;
            }

            // Search query
            if (searchQuery) {
                const searchLower = searchQuery.toLowerCase();
                const searchTerms = searchLower.split(/\s+/).filter(Boolean);

                return (
                    searchTerms.length === 0 || // If no search terms, return true
                    searchTerms.every(
                        (term) =>
                            event.event_name.toLowerCase().includes(term) ||
                            event.event_code.toLowerCase().includes(term) ||
                            event.location.toLowerCase().includes(term) ||
                            event.event_description.toLowerCase().includes(term)
                    )
                );
            }

            return true;
        });
    }

    // Fetch and display events using cached data
    async function fetchEvents() {
        const eventsList = document.getElementById("eventsList");
        const paginationContainer = document.getElementById(
            "paginationContainer"
        );
        if (!eventsList || !paginationContainer) return;

        try {
            if (!auth.isAuthenticated()) {
                eventsList.innerHTML = `
          <div class="text-center py-8 text-base-content/70">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-4 opacity-50" viewBox="0 0 20 20" fill="currentColor">
              <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z" />
            </svg>
            <p>Please log in to view events</p>
          </div>
        `;
                paginationContainer.classList.add("hidden");
                return;
            }

            // Refresh cache if needed
            await refreshCache();

            // Apply filters to cached data
            const filteredEvents = filterEvents(cachedEvents);

            // Sort events by start date (newest first)
            filteredEvents.sort(
                (a, b) =>
                    new Date(b.start_date).getTime() -
                    new Date(a.start_date).getTime()
            );

            // Calculate pagination
            const totalItems = filteredEvents.length;
            totalPages = Math.ceil(totalItems / perPage);
            const startIndex = (currentPage - 1) * perPage;
            const endIndex = startIndex + perPage;
            const paginatedEvents = filteredEvents.slice(startIndex, endIndex);

            // Update pagination UI
            const firstPageBtn = document.getElementById(
                "firstPageBtn"
            ) as HTMLButtonElement;
            const prevPageBtn = document.getElementById(
                "prevPageBtn"
            ) as HTMLButtonElement;
            const nextPageBtn = document.getElementById(
                "nextPageBtn"
            ) as HTMLButtonElement;
            const lastPageBtn = document.getElementById(
                "lastPageBtn"
            ) as HTMLButtonElement;
            const currentPageNumber =
                document.getElementById("currentPageNumber");

            if (firstPageBtn) firstPageBtn.disabled = currentPage <= 1;
            if (prevPageBtn) prevPageBtn.disabled = currentPage <= 1;
            if (nextPageBtn) nextPageBtn.disabled = currentPage >= totalPages;
            if (lastPageBtn) lastPageBtn.disabled = currentPage >= totalPages;
            if (currentPageNumber)
                currentPageNumber.textContent = currentPage.toString();

            // Show/hide pagination based on total pages
            if (totalPages <= 1) {
                paginationContainer.classList.add("hidden");
            } else {
                paginationContainer.classList.remove("hidden");
            }

            // Update events list
            if (paginatedEvents.length === 0) {
                eventsList.innerHTML = `
          <div class="text-center py-8 text-base-content/70">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-4 opacity-50" viewBox="0 0 20 20" fill="currentColor">
              <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z" />
            </svg>
            <p>No events found</p>
          </div>
        `;
                return;
            }

            eventsList.innerHTML = paginatedEvents
                .map((event) => {
                    // Safely parse and format the date
                    let dateStr = "Invalid date";
                    try {
                        const date = new Date(event.start_date);
                        if (!isNaN(date.getTime())) {
                            dateStr = date.toLocaleDateString("en-US", {
                                month: "long",
                                day: "numeric",
                                year: "numeric",
                                hour: "2-digit",
                                minute: "2-digit",
                            });
                        }
                    } catch (e) {
                        console.error("Error formatting date:", e);
                    }

                    const locationStr = event.location
                        ? `${event.location}`
                        : "";
                    const codeStr = event.event_code
                        ? `${event.event_code}`
                        : "";
                    const detailsStr = [locationStr, codeStr]
                        .filter(Boolean)
                        .join(" | code: ");

                    // Store event data in a global map using the event ID as key
                    const eventDataId = `event_${event.id}`;
                    window[eventDataId] = event;

                    return `
          <div class="flex items-center justify-between p-4 bg-base-200 rounded-xl hover:bg-base-300 transition-all duration-300">
            <div class="flex items-center gap-4">
              <div class="badge badge-lg p-3 badge-primary">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z" />
                </svg>
              </div>
              <div>
                <h4 class="font-semibold">${event.event_name}</h4>
                <p class="text-sm opacity-70">${dateStr}${detailsStr ? ` • ${detailsStr}` : ""}</p>
              </div>
            </div>
            <div class="flex gap-2">
              <button class="btn btn-ghost btn-sm" onclick="window.openDetailsModal(window['${eventDataId}'])">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                  <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                </svg>
              </button>
              <button class="btn btn-ghost btn-sm" onclick="window.openEditModal(window['${eventDataId}'])">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                </svg>
              </button>
              <button class="btn btn-ghost btn-sm text-error" onclick="window.deleteEvent('${event.id}', '${event.event_name.replace(/'/g, "\\'")}')">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                </svg>
              </button>
            </div>
          </div>
        `;
                })
                .join("");

            // Calculate and update stats using cached data
            await calculateQuarterlyStats();
        } catch (error) {
            console.error("Failed to fetch events:", error);
            eventsList.innerHTML = `
        <div class="alert alert-error">
          <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span>Failed to load events. Please try refreshing the page.</span>
        </div>
      `;
            paginationContainer.classList.add("hidden");
        }
    }

    // Calculate quarterly stats using cached data
    async function calculateQuarterlyStats() {
        try {
            const { start: termStart, end: termEnd } = getCurrentTerm();
            const { start: quarterStart, end: quarterEnd } =
                getCurrentQuarter();

            // Update quarter name in UI
            const quarterNameEl = document.getElementById("quarterName");
            if (quarterNameEl) {
                quarterNameEl.textContent = getQuarterName();
            }

            // Filter events for current term and quarter
            const termEvents = cachedEvents.filter((event) => {
                const eventDate = new Date(event.start_date);
                return eventDate >= termStart && eventDate <= termEnd;
            });

            const quarterEvents = cachedEvents.filter((event) => {
                const eventDate = new Date(event.start_date);
                return eventDate >= quarterStart && eventDate <= quarterEnd;
            });

            // Calculate stats
            quarterlyStats.totalEvents = termEvents.length;

            const termAttendees = new Map<string, number>();
            termEvents.forEach((event) => {
                event.attendees?.forEach((attendee) => {
                    const count = termAttendees.get(attendee.user_id) || 0;
                    termAttendees.set(attendee.user_id, count + 1);
                });
            });

            quarterlyStats.uniqueAttendees = termAttendees.size;

            const quarterAttendees = new Map<string, number>();
            quarterEvents.forEach((event) => {
                event.attendees?.forEach((attendee) => {
                    const count = quarterAttendees.get(attendee.user_id) || 0;
                    quarterAttendees.set(attendee.user_id, count + 1);
                });
            });

            quarterlyStats.recurringAttendees = Array.from(
                quarterAttendees.values()
            ).filter((count) => count > 1).length;

            // Update the UI
            const totalEventsEl = document.getElementById("totalEvents");
            const uniqueAttendeesEl =
                document.getElementById("uniqueAttendees");
            const recurringAttendeesEl =
                document.getElementById("recurringAttendees");

            if (totalEventsEl)
                totalEventsEl.textContent =
                    quarterlyStats.totalEvents.toString();
            if (uniqueAttendeesEl)
                uniqueAttendeesEl.textContent =
                    quarterlyStats.uniqueAttendees.toString();
            if (recurringAttendeesEl)
                recurringAttendeesEl.textContent =
                    quarterlyStats.recurringAttendees.toString();
        } catch (error) {
            console.error("Failed to calculate quarterly stats:", error);
        }
    }

    // Add pagination event listeners
    document.getElementById("firstPageBtn")?.addEventListener("click", () => {
        if (currentPage > 1) {
            currentPage = 1;
            fetchEvents();
        }
    });

    document.getElementById("prevPageBtn")?.addEventListener("click", () => {
        if (currentPage > 1) {
            currentPage--;
            fetchEvents();
        }
    });

    document.getElementById("nextPageBtn")?.addEventListener("click", () => {
        if (currentPage < totalPages) {
            currentPage++;
            fetchEvents();
        }
    });

    document.getElementById("lastPageBtn")?.addEventListener("click", () => {
        if (currentPage < totalPages) {
            currentPage = totalPages;
            fetchEvents();
        }
    });

    // Add filter event listeners
    // Time filter
    document.querySelectorAll('input[name="timeFilter"]').forEach((radio) => {
        radio.addEventListener("change", (e) => {
            const target = e.target as HTMLInputElement;
            filterState.time = target.value;
            currentPage = 1;
            fetchEvents();
        });
    });

    // Year filter
    document.getElementById("yearFilter")?.addEventListener("change", (e) => {
        const target = e.target as HTMLSelectElement;
        filterState.year = target.value;
        currentPage = 1;
        fetchEvents();
    });

    // Published filter
    document
        .getElementById("publishedFilter")
        ?.addEventListener("change", (e) => {
            const target = e.target as HTMLSelectElement;
            filterState.published = target.value;
            currentPage = 1;
            fetchEvents();
        });

    // Has Files filter
    document
        .getElementById("hasFilesFilter")
        ?.addEventListener("change", (e) => {
            const target = e.target as HTMLSelectElement;
            filterState.hasFiles = target.value;
            currentPage = 1;
            fetchEvents();
        });

    // Has Food filter
    document
        .getElementById("hasFoodFilter")
        ?.addEventListener("change", (e) => {
            const target = e.target as HTMLSelectElement;
            filterState.hasFood = target.value;
            currentPage = 1;
            fetchEvents();
        });

    // Search input with instant search (no debounce needed for cached data)
    const searchInput = document.getElementById("searchInput");
    if (searchInput) {
        // Add input event for instant search
        searchInput.addEventListener("input", (e) => {
            const target = e.target as HTMLInputElement;
            searchQuery = target.value.trim();
            currentPage = 1;
            fetchEvents();
        });

        // Clear search on Escape key
        searchInput.addEventListener("keydown", (e) => {
            if (e.key === "Escape") {
                (e.target as HTMLInputElement).value = "";
                searchQuery = "";
                currentPage = 1;
                fetchEvents();
            }
        });
    }

    // Per page select
    document
        .getElementById("perPageSelect")
        ?.addEventListener("change", (e) => {
            const target = e.target as HTMLSelectElement;
            perPage = parseInt(target.value);
            currentPage = 1;
            fetchEvents();
        });

    // Initial fetch
    fetchEvents();
</script>
